parameter (or (or (or (or (pair %approve (address %spender) (nat %value)) (pair %burn (address %address) (nat %value))) (or (unit %default) (or (nat %deposit) (pair %getAdministrator unit (contract address))))) (or (or (pair %getAllowance (pair (address %owner) (address %spender)) (contract nat)) (pair %getBalance address (contract nat))) (or (pair %getTotalSupply unit (contract nat)) (or (address %liquidate) (pair %mint (address %address) (nat %value)))))) (or (or (or (nat %redeem) (address %setAdministrator)) (or (bool %setPause) (or (pair %transfer (address %from) (pair (address %to) (nat %value))) (unit %updateBalance)))) (or (or (nat %updateBalance_callback) (address %updateDexterAddress)) (or (address %updateGovernorAddress) (or (address %updateOvenRegistryAddress) (nat %updateRewardAmount))))));
storage   (pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        IF_LEFT
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%approve
                    # == approve ==
                    # if ~ (self.data.balances.contains(sp.sender)): # @storage : @parameter%approve
                    DUP;        # @storage : @storage : @parameter%approve
                    DUG 2;      # @storage : @parameter%approve : @storage
                    CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%approve : @storage
                    CAR;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : @parameter%approve : @storage
                    CDR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%approve : @storage
                    SENDER;     # address : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%approve : @storage
                    MEM;        # bool : @parameter%approve : @storage
                    IF
                      {}
                      {
                        SWAP;       # @storage : @parameter%approve
                        # self.data.balances[sp.sender] = sp.record(approvals = {}, balance = 0) # @storage : @parameter%approve
                        UNPAIR;     # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%approve
                        UNPAIR;     # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%approve
                        UNPAIR;     # address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%approve
                        SWAP;       # big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%approve
                        PUSH (option (pair (map %approvals address nat) (nat %balance))) (Some (Pair {} 0)); # option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%approve
                        SENDER;     # address : option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%approve
                        UPDATE;     # big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%approve
                        SWAP;       # address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%approve
                        PAIR;       # pair address (big_map address (pair (map %approvals address nat) (nat %balance))) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%approve
                        PAIR;       # pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%approve
                        PAIR;       # pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : @parameter%approve
                        SWAP;       # @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                      }; # @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    SWAP;       # pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : @parameter%approve
                    # sp.verify(~ self.data.paused) # pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : @parameter%approve
                    DUP;        # pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : @parameter%approve
                    DUG 2;      # pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    CDR;        # pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    CAR;        # pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    CAR;        # bool : @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    IF
                      {
                        PUSH string "WrongCondition: ~ self.data.paused"; # string : @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    # sp.verify((self.data.balances[sp.sender].approvals.get(params.spender, default_value = 0) == 0) | (params.value == 0), message = 'UnsafeAllowanceChange') # @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    PUSH nat 0; # nat : @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    DUP 3;      # pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : nat : @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    CAR;        # pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    CAR;        # pair address (big_map address (pair (map %approvals address nat) (nat %balance))) : nat : @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    CDR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    SENDER;     # address : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    GET;        # option (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    IF_SOME
                      {
                        # of_some: Get-item:90 # @some : nat : @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                      }
                      {
                        PUSH int 90; # int : nat : @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        FAILWITH;   # FAILED
                      }; # @some : nat : @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    CAR;        # map address nat : nat : @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    DUP 3;      # @parameter%approve : map address nat : nat : @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    CAR;        # address : map address nat : nat : @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    GET;        # option nat : nat : @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    IF_SOME
                      {
                        # of_some: Get-item:90 # @some : nat : @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                      }
                      {
                        PUSH nat 0; # nat : nat : @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                      }; # nat : nat : @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    COMPARE;    # int : @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    EQ;         # bool : @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    IF
                      {
                        PUSH bool True; # bool : @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                      }
                      {
                        DUP;        # @parameter%approve : @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        CDR;        # nat : @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        PUSH nat 0; # nat : nat : @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        COMPARE;    # int : @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        EQ;         # bool : @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                      }; # bool : @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    IF
                      {}
                      {
                        PUSH string "UnsafeAllowanceChange"; # string : @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        FAILWITH;   # FAILED
                      }; # @parameter%approve : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    SWAP;       # pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : @parameter%approve
                    # self.data.balances[sp.sender].approvals[params.spender] = params.value # pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : @parameter%approve
                    UNPAIR;     # pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%approve
                    UNPAIR;     # pair address (big_map address (pair (map %approvals address nat) (nat %balance))) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%approve
                    UNPAIR;     # address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%approve
                    SWAP;       # big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%approve
                    DUP;        # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%approve
                    SENDER;     # address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%approve
                    DUP;        # address : address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%approve
                    DUG 2;      # address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%approve
                    GET;        # option (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%approve
                    IF_SOME
                      {}
                      {
                        PUSH int 92; # int : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%approve
                        FAILWITH;   # FAILED
                      }; # @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%approve
                    UNPAIR;     # map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%approve
                    DUP 8;      # @parameter%approve : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%approve
                    CDR;        # nat : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%approve
                    SOME;       # option nat : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%approve
                    DIG 8;      # @parameter%approve : option nat : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    CAR;        # address : option nat : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    UPDATE;     # map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    PAIR;       # pair (map address nat) nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    UPDATE;     # big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    SWAP;       # address : big_map address (pair (map address nat) nat) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    PAIR;       # pair address (big_map address (pair (map address nat) nat)) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    PAIR;       # pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    PAIR;       # pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                  }
                  {
                    SWAP;       # @storage : @parameter%burn
                    # == burn ==
                    # sp.verify((sp.sender == self.data.administrator) | (sp.sender == sp.self_address)) # @storage : @parameter%burn
                    DUP;        # @storage : @storage : @parameter%burn
                    DUG 2;      # @storage : @parameter%burn : @storage
                    CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%burn : @storage
                    CAR;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : @parameter%burn : @storage
                    CAR;        # address : @parameter%burn : @storage
                    SENDER;     # address : address : @parameter%burn : @storage
                    COMPARE;    # int : @parameter%burn : @storage
                    EQ;         # bool : @parameter%burn : @storage
                    IF
                      {
                        PUSH bool True; # bool : @parameter%burn : @storage
                      }
                      {
                        SELF_ADDRESS; # address : @parameter%burn : @storage
                        SENDER;     # address : address : @parameter%burn : @storage
                        COMPARE;    # int : @parameter%burn : @storage
                        EQ;         # bool : @parameter%burn : @storage
                      }; # bool : @parameter%burn : @storage
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: (sp.sender == self.data.administrator) | (sp.sender == sp.self_address)"; # string : @parameter%burn : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%burn : @storage
                    # sp.verify(self.data.balances[params.address].balance >= params.value) # @parameter%burn : @storage
                    DUP;        # @parameter%burn : @parameter%burn : @storage
                    CDR;        # nat : @parameter%burn : @storage
                    DUP 3;      # @storage : nat : @parameter%burn : @storage
                    CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%burn : @storage
                    CAR;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : nat : @parameter%burn : @storage
                    CDR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%burn : @storage
                    DUP 3;      # @parameter%burn : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%burn : @storage
                    CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%burn : @storage
                    GET;        # option (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%burn : @storage
                    IF_SOME
                      {
                        # of_some: Get-item:129 # @some : nat : @parameter%burn : @storage
                      }
                      {
                        PUSH int 129; # int : nat : @parameter%burn : @storage
                        FAILWITH;   # FAILED
                      }; # @some : nat : @parameter%burn : @storage
                    CDR;        # nat : nat : @parameter%burn : @storage
                    COMPARE;    # int : @parameter%burn : @storage
                    GE;         # bool : @parameter%burn : @storage
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: self.data.balances[params.address].balance >= params.value"; # string : @parameter%burn : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%burn : @storage
                    SWAP;       # @storage : @parameter%burn
                    # self.data.balances[params.address].balance = sp.as_nat(self.data.balances[params.address].balance - params.value) # @storage : @parameter%burn
                    DUP;        # @storage : @storage : @parameter%burn
                    DUG 2;      # @storage : @parameter%burn : @storage
                    UNPAIR;     # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn : @storage
                    UNPAIR;     # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn : @storage
                    UNPAIR;     # address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn : @storage
                    SWAP;       # big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn : @storage
                    DUP;        # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn : @storage
                    DUP 6;      # @parameter%burn : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn : @storage
                    CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn : @storage
                    DUP;        # address : address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn : @storage
                    DUG 2;      # address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn : @storage
                    GET;        # option (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn : @storage
                    IF_SOME
                      {}
                      {
                        PUSH int 130; # int : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn : @storage
                        FAILWITH;   # FAILED
                      }; # @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn : @storage
                    CAR;        # map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn : @storage
                    DUP 7;      # @parameter%burn : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn : @storage
                    CDR;        # nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn : @storage
                    DIG 8;      # @storage : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn
                    CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn
                    CAR;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn
                    CDR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn
                    DUP 9;      # @parameter%burn : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn
                    CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn
                    GET;        # option (pair (map %approvals address nat) (nat %balance)) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn
                    IF_SOME
                      {
                        # of_some: Get-item:130 # @some : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn
                      }
                      {
                        PUSH int 130; # int : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn
                        FAILWITH;   # FAILED
                      }; # @some : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn
                    CDR;        # nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn
                    SUB;        # int : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn
                    ISNAT;      # option nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn
                    IF_SOME
                      {}
                      {
                        PUSH int 130; # int : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn
                        FAILWITH;   # FAILED
                      }; # @some : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn
                    SWAP;       # map address nat : @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn
                    PAIR;       # pair (map address nat) @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn
                    SOME;       # option (pair (map address nat) @some) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn
                    SWAP;       # address : option (pair (map address nat) @some) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn
                    UPDATE;     # big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn
                    SWAP;       # address : big_map address (pair (map address nat) nat) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn
                    PAIR;       # pair address (big_map address (pair (map address nat) nat)) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn
                    PAIR;       # pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn
                    PAIR;       # pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : @parameter%burn
                    # self.data.totalSupply = sp.as_nat(self.data.totalSupply - params.value) # pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : @parameter%burn
                    DUP;        # pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : @parameter%burn
                    DUG 2;      # pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : @parameter%burn : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    UNPAIR;     # pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%burn : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    SWAP;       # pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%burn : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    UNPAIR;     # pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%burn : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    SWAP;       # pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%burn : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    UNPAIR;     # address : pair (nat %totalSupply) (nat %underlyingBalance) : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%burn : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    SWAP;       # pair (nat %totalSupply) (nat %underlyingBalance) : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%burn : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    CDR;        # nat : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%burn : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    DIG 4;      # @parameter%burn : nat : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    CDR;        # nat : nat : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    DIG 5;      # pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : nat : nat : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                    GET 7;      # nat : nat : nat : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                    SUB;        # int : nat : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                    ISNAT;      # option nat : nat : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                    IF_SOME
                      {}
                      {
                        PUSH int 131; # int : nat : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                        FAILWITH;   # FAILED
                      }; # @some : nat : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                    PAIR;       # pair @some nat : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                    SWAP;       # address : pair @some nat : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                    PAIR;       # pair address (pair @some nat) : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                    SWAP;       # pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair address (pair @some nat) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                    PAIR;       # pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair @some nat)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                    SWAP;       # pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair @some nat))
                    PAIR;       # pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair @some nat)))
                  }; # pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
                NIL operation; # list operation : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
              }
              {
                IF_LEFT
                  {
                    DROP;       # @storage
                    # == default ==
                    # sp.transfer((sp.self_address, (1, sp.add_seconds(sp.now, 3600))), sp.balance, sp.contract(sp.TPair(sp.TAddress, sp.TPair(sp.TNat, sp.TTimestamp)), self.data.dexterAddress, entry_point='xtzToToken').open_some()) # @storage
                    DUP;        # @storage : @storage
                    CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @storage
                    CDR;        # pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : @storage
                    CAR;        # address : @storage
                    CONTRACT %xtzToToken (pair address (pair nat timestamp)); # option (contract (pair address (pair nat timestamp))) : @storage
                    IF_SOME
                      {}
                      {
                        PUSH int 76; # int : @storage
                        FAILWITH;   # FAILED
                      }; # @some : @storage
                    NIL operation; # list operation : @some : @storage
                    SWAP;       # @some : list operation : @storage
                    BALANCE;    # mutez : @some : list operation : @storage
                    NOW;        # timestamp : mutez : @some : list operation : @storage
                    PUSH int 3600; # int : timestamp : mutez : @some : list operation : @storage
                    ADD;        # timestamp : mutez : @some : list operation : @storage
                    PUSH nat 1; # nat : timestamp : mutez : @some : list operation : @storage
                    PAIR;       # pair nat timestamp : mutez : @some : list operation : @storage
                    SELF_ADDRESS; # address : pair nat timestamp : mutez : @some : list operation : @storage
                    PAIR;       # pair address (pair nat timestamp) : mutez : @some : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                    # sp.send(sp.self_address, sp.tez(0)) # list operation : @storage
                    SELF_ADDRESS; # address : list operation : @storage
                    CONTRACT %updateBalance unit; # option (contract unit) : list operation : @storage
                    IF_SOME
                      {}
                      {
                        PUSH int 86; # int : list operation : @storage
                        FAILWITH;   # FAILED
                      }; # @some : list operation : @storage
                    PUSH mutez 0; # mutez : @some : list operation : @storage
                    UNIT;       # unit : mutez : @some : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                  }
                  {
                    IF_LEFT
                      {
                        # == deposit ==
                        # newTokens = sp.local("newTokens", params * 1000000000000000000) # @parameter%deposit : @storage
                        DUP;        # @parameter%deposit : @parameter%deposit : @storage
                        PUSH nat 1000000000000000000; # nat : @parameter%deposit : @parameter%deposit : @storage
                        MUL;        # nat : @parameter%deposit : @storage
                        # if self.data.totalSupply != 0: # nat : @parameter%deposit : @storage
                        PUSH nat 0; # nat : nat : @parameter%deposit : @storage
                        DUP 4;      # @storage : nat : nat : @parameter%deposit : @storage
                        GET 7;      # nat : nat : nat : @parameter%deposit : @storage
                        COMPARE;    # int : nat : @parameter%deposit : @storage
                        NEQ;        # bool : nat : @parameter%deposit : @storage
                        IF
                          {
                            DROP;       # @parameter%deposit : @storage
                            # newUnderlyingBalance = sp.local("newUnderlyingBalance", self.data.underlyingBalance + params) # @parameter%deposit : @storage
                            DUP;        # @parameter%deposit : @parameter%deposit : @storage
                            DUP 3;      # @storage : @parameter%deposit : @parameter%deposit : @storage
                            GET 8;      # nat : @parameter%deposit : @parameter%deposit : @storage
                            ADD;        # nat : @parameter%deposit : @storage
                            # fractionOfPoolOwnership = sp.local("fractionOfPoolOwnership", (params * 1000000000000000000) // newUnderlyingBalance.value) # nat : @parameter%deposit : @storage
                            PUSH nat 1000000000000000000; # nat : nat : @parameter%deposit : @storage
                            DUP 3;      # @parameter%deposit : nat : nat : @parameter%deposit : @storage
                            MUL;        # nat : nat : @parameter%deposit : @storage
                            EDIV;       # option (pair nat nat) : @parameter%deposit : @storage
                            IF_SOME
                              {
                                CAR;        # nat : @parameter%deposit : @storage
                              }
                              {
                                PUSH int 136; # int : @parameter%deposit : @storage
                                FAILWITH;   # FAILED
                              }; # nat : @parameter%deposit : @storage
                            # newTokens.value = (fractionOfPoolOwnership.value * self.data.totalSupply) // sp.as_nat(1000000000000000000 - fractionOfPoolOwnership.value) # nat : @parameter%deposit : @storage
                            DUP;        # nat : nat : @parameter%deposit : @storage
                            PUSH nat 1000000000000000000; # nat : nat : nat : @parameter%deposit : @storage
                            SUB;        # int : nat : @parameter%deposit : @storage
                            ISNAT;      # option nat : nat : @parameter%deposit : @storage
                            IF_SOME
                              {}
                              {
                                PUSH int 137; # int : nat : @parameter%deposit : @storage
                                FAILWITH;   # FAILED
                              }; # @some : nat : @parameter%deposit : @storage
                            DUP 4;      # @storage : @some : nat : @parameter%deposit : @storage
                            GET 7;      # nat : @some : nat : @parameter%deposit : @storage
                            DIG 2;      # nat : nat : @some : @parameter%deposit : @storage
                            MUL;        # nat : @some : @parameter%deposit : @storage
                            EDIV;       # option (pair nat nat) : @parameter%deposit : @storage
                            IF_SOME
                              {
                                CAR;        # nat : @parameter%deposit : @storage
                              }
                              {
                                PUSH int 137; # int : @parameter%deposit : @storage
                                FAILWITH;   # FAILED
                              }; # nat : @parameter%deposit : @storage
                          }
                          {}; # nat : @parameter%deposit : @storage
                        # self.data.underlyingBalance += params # nat : @parameter%deposit : @storage
                        DIG 2;      # @storage : nat : @parameter%deposit
                        UNPAIR;     # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : nat : @parameter%deposit
                        SWAP;       # pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%deposit
                        UNPAIR;     # pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%deposit
                        SWAP;       # pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%deposit
                        UNPAIR;     # address : pair (nat %totalSupply) (nat %underlyingBalance) : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%deposit
                        SWAP;       # pair (nat %totalSupply) (nat %underlyingBalance) : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%deposit
                        UNPAIR;     # nat : nat : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%deposit
                        SWAP;       # nat : nat : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%deposit
                        DUP 7;      # @parameter%deposit : nat : nat : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%deposit
                        ADD;        # nat : nat : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%deposit
                        SWAP;       # nat : nat : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%deposit
                        PAIR;       # pair nat nat : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%deposit
                        SWAP;       # address : pair nat nat : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%deposit
                        PAIR;       # pair address (pair nat nat) : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%deposit
                        SWAP;       # pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair address (pair nat nat) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%deposit
                        PAIR;       # pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%deposit
                        SWAP;       # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)) : nat : @parameter%deposit
                        PAIR;       # pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat))) : nat : @parameter%deposit
                        DUG 2;      # nat : @parameter%deposit : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
                        # sp.transfer(sp.record(from_ = sp.sender, to_ = sp.self_address, value = params), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.tokenAddress, entry_point='transfer').open_some()) # nat : @parameter%deposit : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
                        NIL operation; # list operation : nat : @parameter%deposit : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
                        DUP 4;      # pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat))) : list operation : nat : @parameter%deposit : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
                        GET 5;      # address : list operation : nat : @parameter%deposit : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
                        CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : nat : @parameter%deposit : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
                        IF_SOME
                          {}
                          {
                            PUSH int 148; # int : list operation : nat : @parameter%deposit : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
                            FAILWITH;   # FAILED
                          }; # @some : list operation : nat : @parameter%deposit : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
                        PUSH mutez 0; # mutez : @some : list operation : nat : @parameter%deposit : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
                        DIG 4;      # @parameter%deposit : mutez : @some : list operation : nat : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
                        SELF_ADDRESS; # address : @parameter%deposit : mutez : @some : list operation : nat : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
                        PAIR %to %value; # pair (address %to) (@parameter%deposit %value) : mutez : @some : list operation : nat : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
                        SENDER;     # address : pair (address %to) (@parameter%deposit %value) : mutez : @some : list operation : nat : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
                        PAIR %from; # pair (address %from) (pair (address %to) (@parameter%deposit %value)) : mutez : @some : list operation : nat : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
                        TRANSFER_TOKENS; # operation : list operation : nat : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
                        CONS;       # list operation : nat : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
                        # sp.transfer(sp.record(address = sp.sender, value = newTokens.value), sp.tez(0), sp.contract(sp.TRecord(address = sp.TAddress, value = sp.TNat).layout(("address", "value")), sp.self_address, entry_point='mint').open_some()) # list operation : nat : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
                        SELF_ADDRESS; # address : list operation : nat : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
                        CONTRACT %mint (pair (address %address) (nat %value)); # option (contract (pair (address %address) (nat %value))) : list operation : nat : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
                        IF_SOME
                          {}
                          {
                            PUSH int 160; # int : list operation : nat : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
                            FAILWITH;   # FAILED
                          }; # @some : list operation : nat : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
                        PUSH mutez 0; # mutez : @some : list operation : nat : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
                        DIG 3;      # nat : mutez : @some : list operation : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
                        SENDER;     # address : nat : mutez : @some : list operation : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
                        PAIR %address %value; # pair (address %address) (nat %value) : mutez : @some : list operation : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
                        TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
                        CONS;       # list operation : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
                      }
                      {
                        SWAP;       # @storage : @parameter%getAdministrator
                        # == getAdministrator ==
                        # sp.result(self.data.administrator) # @storage : @parameter%getAdministrator
                        DUP;        # @storage : @storage : @parameter%getAdministrator
                        DUG 2;      # @storage : @parameter%getAdministrator : @storage
                        CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%getAdministrator : @storage
                        CAR;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : @parameter%getAdministrator : @storage
                        CAR;        # address : @parameter%getAdministrator : @storage
                        # sp.transfer(__s205.value, sp.tez(0), sp.snd(params)) # address : @parameter%getAdministrator : @storage
                        NIL operation; # list operation : address : @parameter%getAdministrator : @storage
                        DIG 2;      # @parameter%getAdministrator : list operation : address : @storage
                        CDR;        # contract address : list operation : address : @storage
                        PUSH mutez 0; # mutez : contract address : list operation : address : @storage
                        DIG 3;      # address : mutez : contract address : list operation : @storage
                        TRANSFER_TOKENS; # operation : list operation : @storage
                        CONS;       # list operation : @storage
                      }; # list operation : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
                  }; # list operation : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
              }; # list operation : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
          }
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%getAllowance
                    # == getAllowance ==
                    # sp.result(self.data.balances[sp.fst(params).owner].approvals[sp.fst(params).spender]) # @storage : @parameter%getAllowance
                    DUP;        # @storage : @storage : @parameter%getAllowance
                    DUG 2;      # @storage : @parameter%getAllowance : @storage
                    CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%getAllowance : @storage
                    CAR;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : @parameter%getAllowance : @storage
                    CDR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%getAllowance : @storage
                    SWAP;       # @parameter%getAllowance : big_map address (pair (map %approvals address nat) (nat %balance)) : @storage
                    DUP;        # @parameter%getAllowance : @parameter%getAllowance : big_map address (pair (map %approvals address nat) (nat %balance)) : @storage
                    DUG 2;      # @parameter%getAllowance : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%getAllowance : @storage
                    CAR;        # pair (address %owner) (address %spender) : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%getAllowance : @storage
                    CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%getAllowance : @storage
                    GET;        # option (pair (map %approvals address nat) (nat %balance)) : @parameter%getAllowance : @storage
                    IF_SOME
                      {
                        # of_some: Get-item:104 # @some : @parameter%getAllowance : @storage
                      }
                      {
                        PUSH int 104; # int : @parameter%getAllowance : @storage
                        FAILWITH;   # FAILED
                      }; # @some : @parameter%getAllowance : @storage
                    CAR;        # map address nat : @parameter%getAllowance : @storage
                    SWAP;       # @parameter%getAllowance : map address nat : @storage
                    DUP;        # @parameter%getAllowance : @parameter%getAllowance : map address nat : @storage
                    DUG 2;      # @parameter%getAllowance : map address nat : @parameter%getAllowance : @storage
                    CAR;        # pair (address %owner) (address %spender) : map address nat : @parameter%getAllowance : @storage
                    CDR;        # address : map address nat : @parameter%getAllowance : @storage
                    GET;        # option nat : @parameter%getAllowance : @storage
                    IF_SOME
                      {
                        # of_some: Get-item:104 # @some : @parameter%getAllowance : @storage
                      }
                      {
                        PUSH int 104; # int : @parameter%getAllowance : @storage
                        FAILWITH;   # FAILED
                      }; # @some : @parameter%getAllowance : @storage
                    # sp.transfer(__s206.value, sp.tez(0), sp.snd(params)) # @some : @parameter%getAllowance : @storage
                    NIL operation; # list operation : @some : @parameter%getAllowance : @storage
                    DIG 2;      # @parameter%getAllowance : list operation : @some : @storage
                    CDR;        # contract nat : list operation : @some : @storage
                    PUSH mutez 0; # mutez : contract nat : list operation : @some : @storage
                    DIG 3;      # @some : mutez : contract nat : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                  }
                  {
                    SWAP;       # @storage : @parameter%getBalance
                    # == getBalance ==
                    # sp.result(self.data.balances[sp.fst(params)].balance) # @storage : @parameter%getBalance
                    DUP;        # @storage : @storage : @parameter%getBalance
                    DUG 2;      # @storage : @parameter%getBalance : @storage
                    CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%getBalance : @storage
                    CAR;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : @parameter%getBalance : @storage
                    CDR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%getBalance : @storage
                    SWAP;       # @parameter%getBalance : big_map address (pair (map %approvals address nat) (nat %balance)) : @storage
                    DUP;        # @parameter%getBalance : @parameter%getBalance : big_map address (pair (map %approvals address nat) (nat %balance)) : @storage
                    DUG 2;      # @parameter%getBalance : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%getBalance : @storage
                    CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%getBalance : @storage
                    GET;        # option (pair (map %approvals address nat) (nat %balance)) : @parameter%getBalance : @storage
                    IF_SOME
                      {
                        # of_some: Get-item:100 # @some : @parameter%getBalance : @storage
                      }
                      {
                        PUSH int 100; # int : @parameter%getBalance : @storage
                        FAILWITH;   # FAILED
                      }; # @some : @parameter%getBalance : @storage
                    CDR;        # nat : @parameter%getBalance : @storage
                    # sp.transfer(__s207.value, sp.tez(0), sp.snd(params)) # nat : @parameter%getBalance : @storage
                    NIL operation; # list operation : nat : @parameter%getBalance : @storage
                    DIG 2;      # @parameter%getBalance : list operation : nat : @storage
                    CDR;        # contract nat : list operation : nat : @storage
                    PUSH mutez 0; # mutez : contract nat : list operation : nat : @storage
                    DIG 3;      # nat : mutez : contract nat : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                  }; # list operation : @storage
              }
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%getTotalSupply
                    # == getTotalSupply ==
                    # sp.result(self.data.totalSupply) # @storage : @parameter%getTotalSupply
                    DUP;        # @storage : @storage : @parameter%getTotalSupply
                    DUG 2;      # @storage : @parameter%getTotalSupply : @storage
                    GET 7;      # nat : @parameter%getTotalSupply : @storage
                    # sp.transfer(__s208.value, sp.tez(0), sp.snd(params)) # nat : @parameter%getTotalSupply : @storage
                    NIL operation; # list operation : nat : @parameter%getTotalSupply : @storage
                    DIG 2;      # @parameter%getTotalSupply : list operation : nat : @storage
                    CDR;        # contract nat : list operation : nat : @storage
                    PUSH mutez 0; # mutez : contract nat : list operation : nat : @storage
                    DIG 3;      # nat : mutez : contract nat : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                  }
                  {
                    IF_LEFT
                      {
                        # == liquidate ==
                        # sp.transfer(params, sp.tez(0), sp.contract(sp.TAddress, self.data.ovenRegistryAddress, entry_point='isOven').open_some()) # @parameter%liquidate : @storage
                        NIL operation; # list operation : @parameter%liquidate : @storage
                        DUP 3;      # @storage : list operation : @parameter%liquidate : @storage
                        CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : list operation : @parameter%liquidate : @storage
                        CDR;        # pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : list operation : @parameter%liquidate : @storage
                        CDR;        # pair (address %governorAddress) (address %ovenRegistryAddress) : list operation : @parameter%liquidate : @storage
                        CDR;        # address : list operation : @parameter%liquidate : @storage
                        CONTRACT %isOven address; # option (contract address) : list operation : @parameter%liquidate : @storage
                        IF_SOME
                          {}
                          {
                            PUSH int 99; # int : list operation : @parameter%liquidate : @storage
                            FAILWITH;   # FAILED
                          }; # @some : list operation : @parameter%liquidate : @storage
                        PUSH mutez 0; # mutez : @some : list operation : @parameter%liquidate : @storage
                        DUP 4;      # @parameter%liquidate : mutez : @some : list operation : @parameter%liquidate : @storage
                        TRANSFER_TOKENS; # operation : list operation : @parameter%liquidate : @storage
                        CONS;       # list operation : @parameter%liquidate : @storage
                        # sp.transfer(sp.record(from_ = sp.self_address, to_ = sp.sender, value = self.data.rewardAmount), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.tokenAddress, entry_point='transfer').open_some()) # list operation : @parameter%liquidate : @storage
                        DUP 3;      # @storage : list operation : @parameter%liquidate : @storage
                        GET 5;      # address : list operation : @parameter%liquidate : @storage
                        CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : @parameter%liquidate : @storage
                        IF_SOME
                          {}
                          {
                            PUSH int 112; # int : list operation : @parameter%liquidate : @storage
                            FAILWITH;   # FAILED
                          }; # @some : list operation : @parameter%liquidate : @storage
                        PUSH mutez 0; # mutez : @some : list operation : @parameter%liquidate : @storage
                        DUP 5;      # @storage : mutez : @some : list operation : @parameter%liquidate : @storage
                        CDR;        # pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : mutez : @some : list operation : @parameter%liquidate : @storage
                        CAR;        # pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : mutez : @some : list operation : @parameter%liquidate : @storage
                        CDR;        # pair (nat %rewardAmount) (int %state) : mutez : @some : list operation : @parameter%liquidate : @storage
                        CAR;        # nat : mutez : @some : list operation : @parameter%liquidate : @storage
                        SENDER;     # address : nat : mutez : @some : list operation : @parameter%liquidate : @storage
                        PAIR %to %value; # pair (address %to) (nat %value) : mutez : @some : list operation : @parameter%liquidate : @storage
                        SELF_ADDRESS; # address : pair (address %to) (nat %value) : mutez : @some : list operation : @parameter%liquidate : @storage
                        PAIR %from; # pair (address %from) (pair (address %to) (nat %value)) : mutez : @some : list operation : @parameter%liquidate : @storage
                        TRANSFER_TOKENS; # operation : list operation : @parameter%liquidate : @storage
                        CONS;       # list operation : @parameter%liquidate : @storage
                        SWAP;       # @parameter%liquidate : list operation : @storage
                        # sp.send(params, sp.tez(0)) # @parameter%liquidate : list operation : @storage
                        CONTRACT %liquidate unit; # option (contract unit) : list operation : @storage
                        IF_SOME
                          {}
                          {
                            PUSH int 120; # int : list operation : @storage
                            FAILWITH;   # FAILED
                          }; # @some : list operation : @storage
                        PUSH mutez 0; # mutez : @some : list operation : @storage
                        UNIT;       # unit : mutez : @some : list operation : @storage
                        TRANSFER_TOKENS; # operation : list operation : @storage
                        CONS;       # list operation : @storage
                      }
                      {
                        SWAP;       # @storage : @parameter%mint
                        # == mint ==
                        # sp.verify((sp.sender == self.data.administrator) | (sp.sender == sp.self_address)) # @storage : @parameter%mint
                        DUP;        # @storage : @storage : @parameter%mint
                        DUG 2;      # @storage : @parameter%mint : @storage
                        CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%mint : @storage
                        CAR;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : @parameter%mint : @storage
                        CAR;        # address : @parameter%mint : @storage
                        SENDER;     # address : address : @parameter%mint : @storage
                        COMPARE;    # int : @parameter%mint : @storage
                        EQ;         # bool : @parameter%mint : @storage
                        IF
                          {
                            PUSH bool True; # bool : @parameter%mint : @storage
                          }
                          {
                            SELF_ADDRESS; # address : @parameter%mint : @storage
                            SENDER;     # address : address : @parameter%mint : @storage
                            COMPARE;    # int : @parameter%mint : @storage
                            EQ;         # bool : @parameter%mint : @storage
                          }; # bool : @parameter%mint : @storage
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: (sp.sender == self.data.administrator) | (sp.sender == sp.self_address)"; # string : @parameter%mint : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%mint : @storage
                        SWAP;       # @storage : @parameter%mint
                        # if ~ (self.data.balances.contains(params.address)): # @storage : @parameter%mint
                        DUP;        # @storage : @storage : @parameter%mint
                        DUG 2;      # @storage : @parameter%mint : @storage
                        CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%mint : @storage
                        CAR;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : @parameter%mint : @storage
                        CDR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%mint : @storage
                        SWAP;       # @parameter%mint : big_map address (pair (map %approvals address nat) (nat %balance)) : @storage
                        DUP;        # @parameter%mint : @parameter%mint : big_map address (pair (map %approvals address nat) (nat %balance)) : @storage
                        DUG 2;      # @parameter%mint : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%mint : @storage
                        CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%mint : @storage
                        MEM;        # bool : @parameter%mint : @storage
                        IF
                          {}
                          {
                            SWAP;       # @storage : @parameter%mint
                            # self.data.balances[params.address] = sp.record(approvals = {}, balance = 0) # @storage : @parameter%mint
                            UNPAIR;     # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                            UNPAIR;     # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                            UNPAIR;     # address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                            SWAP;       # big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                            PUSH (option (pair (map %approvals address nat) (nat %balance))) (Some (Pair {} 0)); # option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                            DUP 6;      # @parameter%mint : option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                            CAR;        # address : option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                            UPDATE;     # big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                            SWAP;       # address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                            PAIR;       # pair address (big_map address (pair (map %approvals address nat) (nat %balance))) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                            PAIR;       # pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                            PAIR;       # pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : @parameter%mint
                            SWAP;       # @parameter%mint : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                          }; # @parameter%mint : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        SWAP;       # pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : @parameter%mint
                        # self.data.balances[params.address].balance += params.value # pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : @parameter%mint
                        UNPAIR;     # pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                        UNPAIR;     # pair address (big_map address (pair (map %approvals address nat) (nat %balance))) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                        UNPAIR;     # address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                        SWAP;       # big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                        DUP;        # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                        DUP 6;      # @parameter%mint : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                        CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                        DUP;        # address : address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                        DUG 2;      # address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                        GET;        # option (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                        IF_SOME
                          {}
                          {
                            PUSH int 119; # int : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                            FAILWITH;   # FAILED
                          }; # @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                        UNPAIR;     # map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                        SWAP;       # nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                        DUP 8;      # @parameter%mint : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                        CDR;        # nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                        ADD;        # nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                        SWAP;       # map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                        PAIR;       # pair (map address nat) nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                        SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                        SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                        UPDATE;     # big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                        SWAP;       # address : big_map address (pair (map address nat) nat) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                        PAIR;       # pair address (big_map address (pair (map address nat) nat)) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                        PAIR;       # pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%mint
                        SWAP;       # pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%mint
                        # self.data.totalSupply += params.value # pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%mint
                        UNPAIR;     # pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%mint
                        SWAP;       # pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%mint
                        UNPAIR;     # address : pair (nat %totalSupply) (nat %underlyingBalance) : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%mint
                        SWAP;       # pair (nat %totalSupply) (nat %underlyingBalance) : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%mint
                        UNPAIR;     # nat : nat : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%mint
                        DIG 5;      # @parameter%mint : nat : nat : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                        CDR;        # nat : nat : nat : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                        ADD;        # nat : nat : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                        PAIR;       # pair nat nat : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                        SWAP;       # address : pair nat nat : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                        PAIR;       # pair address (pair nat nat) : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                        SWAP;       # pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair address (pair nat nat) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                        PAIR;       # pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                        SWAP;       # pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat))
                        PAIR;       # pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
                        NIL operation; # list operation : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
                      }; # list operation : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
                  }; # list operation : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
              }; # list operation : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
          }; # list operation : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%redeem
                    # == redeem ==
                    # fractionOfPoolOwnership = sp.local("fractionOfPoolOwnership", (params * 1000000000000000000) // self.data.totalSupply) # @storage : @parameter%redeem
                    DUP;        # @storage : @storage : @parameter%redeem
                    DUG 2;      # @storage : @parameter%redeem : @storage
                    GET 7;      # nat : @parameter%redeem : @storage
                    PUSH nat 1000000000000000000; # nat : nat : @parameter%redeem : @storage
                    DUP 3;      # @parameter%redeem : nat : nat : @parameter%redeem : @storage
                    MUL;        # nat : nat : @parameter%redeem : @storage
                    EDIV;       # option (pair nat nat) : @parameter%redeem : @storage
                    IF_SOME
                      {
                        CAR;        # nat : @parameter%redeem : @storage
                      }
                      {
                        PUSH int 172; # int : @parameter%redeem : @storage
                        FAILWITH;   # FAILED
                      }; # nat : @parameter%redeem : @storage
                    # tokensToReceive = sp.local("tokensToReceive", (fractionOfPoolOwnership.value * self.data.underlyingBalance) // 1000000000000000000) # nat : @parameter%redeem : @storage
                    PUSH nat 1000000000000000000; # nat : nat : @parameter%redeem : @storage
                    DUP 4;      # @storage : nat : nat : @parameter%redeem : @storage
                    GET 8;      # nat : nat : nat : @parameter%redeem : @storage
                    DIG 2;      # nat : nat : nat : @parameter%redeem : @storage
                    MUL;        # nat : nat : @parameter%redeem : @storage
                    EDIV;       # option (pair nat nat) : @parameter%redeem : @storage
                    IF_SOME
                      {
                        CAR;        # nat : @parameter%redeem : @storage
                      }
                      {
                        PUSH int 173; # int : @parameter%redeem : @storage
                        FAILWITH;   # FAILED
                      }; # nat : @parameter%redeem : @storage
                    # self.data.underlyingBalance = sp.as_nat(self.data.underlyingBalance - tokensToReceive.value) # nat : @parameter%redeem : @storage
                    DUP 3;      # @storage : nat : @parameter%redeem : @storage
                    UNPAIR;     # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : nat : @parameter%redeem : @storage
                    SWAP;       # pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%redeem : @storage
                    UNPAIR;     # pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%redeem : @storage
                    SWAP;       # pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%redeem : @storage
                    UNPAIR;     # address : pair (nat %totalSupply) (nat %underlyingBalance) : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%redeem : @storage
                    SWAP;       # pair (nat %totalSupply) (nat %underlyingBalance) : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%redeem : @storage
                    CAR;        # nat : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%redeem : @storage
                    DUP 5;      # nat : nat : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%redeem : @storage
                    DIG 7;      # @storage : nat : nat : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%redeem
                    GET 8;      # nat : nat : nat : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%redeem
                    SUB;        # int : nat : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%redeem
                    ISNAT;      # option nat : nat : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%redeem
                    IF_SOME
                      {}
                      {
                        PUSH int 176; # int : nat : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%redeem
                        FAILWITH;   # FAILED
                      }; # @some : nat : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%redeem
                    SWAP;       # nat : @some : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%redeem
                    PAIR;       # pair nat @some : address : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%redeem
                    SWAP;       # address : pair nat @some : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%redeem
                    PAIR;       # pair address (pair nat @some) : pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%redeem
                    SWAP;       # pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair address (pair nat @some) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%redeem
                    PAIR;       # pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat @some)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%redeem
                    SWAP;       # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat @some)) : nat : @parameter%redeem
                    PAIR;       # pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat @some))) : nat : @parameter%redeem
                    DUG 2;      # nat : @parameter%redeem : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat @some)))
                    # sp.transfer(sp.record(address = sp.sender, value = params), sp.tez(0), sp.contract(sp.TRecord(address = sp.TAddress, value = sp.TNat).layout(("address", "value")), sp.self_address, entry_point='burn').open_some()) # nat : @parameter%redeem : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat @some)))
                    NIL operation; # list operation : nat : @parameter%redeem : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat @some)))
                    SELF_ADDRESS; # address : list operation : nat : @parameter%redeem : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat @some)))
                    CONTRACT %burn (pair (address %address) (nat %value)); # option (contract (pair (address %address) (nat %value))) : list operation : nat : @parameter%redeem : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat @some)))
                    IF_SOME
                      {}
                      {
                        PUSH int 183; # int : list operation : nat : @parameter%redeem : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat @some)))
                        FAILWITH;   # FAILED
                      }; # @some : list operation : nat : @parameter%redeem : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat @some)))
                    PUSH mutez 0; # mutez : @some : list operation : nat : @parameter%redeem : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat @some)))
                    DIG 4;      # @parameter%redeem : mutez : @some : list operation : nat : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat @some)))
                    SENDER;     # address : @parameter%redeem : mutez : @some : list operation : nat : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat @some)))
                    PAIR %address %value; # pair (address %address) (@parameter%redeem %value) : mutez : @some : list operation : nat : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat @some)))
                    TRANSFER_TOKENS; # operation : list operation : nat : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat @some)))
                    CONS;       # list operation : nat : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat @some)))
                    # sp.transfer(sp.record(from_ = sp.self_address, to_ = sp.sender, value = tokensToReceive.value), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.tokenAddress, entry_point='transfer').open_some()) # list operation : nat : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat @some)))
                    DUP 3;      # pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat @some))) : list operation : nat : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat @some)))
                    GET 5;      # address : list operation : nat : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat @some)))
                    CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : nat : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat @some)))
                    IF_SOME
                      {}
                      {
                        PUSH int 196; # int : list operation : nat : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat @some)))
                        FAILWITH;   # FAILED
                      }; # @some : list operation : nat : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat @some)))
                    PUSH mutez 0; # mutez : @some : list operation : nat : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat @some)))
                    DIG 3;      # nat : mutez : @some : list operation : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat @some)))
                    SENDER;     # address : nat : mutez : @some : list operation : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat @some)))
                    PAIR %to %value; # pair (address %to) (nat %value) : mutez : @some : list operation : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat @some)))
                    SELF_ADDRESS; # address : pair (address %to) (nat %value) : mutez : @some : list operation : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat @some)))
                    PAIR %from; # pair (address %from) (pair (address %to) (nat %value)) : mutez : @some : list operation : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat @some)))
                    TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat @some)))
                    CONS;       # list operation : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat @some)))
                  }
                  {
                    SWAP;       # @storage : @parameter%setAdministrator
                    # == setAdministrator ==
                    # sp.verify(sp.sender == self.data.administrator) # @storage : @parameter%setAdministrator
                    DUP;        # @storage : @storage : @parameter%setAdministrator
                    DUG 2;      # @storage : @parameter%setAdministrator : @storage
                    CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%setAdministrator : @storage
                    CAR;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : @parameter%setAdministrator : @storage
                    CAR;        # address : @parameter%setAdministrator : @storage
                    SENDER;     # address : address : @parameter%setAdministrator : @storage
                    COMPARE;    # int : @parameter%setAdministrator : @storage
                    EQ;         # bool : @parameter%setAdministrator : @storage
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: sp.sender == self.data.administrator"; # string : @parameter%setAdministrator : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setAdministrator : @storage
                    SWAP;       # @storage : @parameter%setAdministrator
                    # self.data.administrator = params # @storage : @parameter%setAdministrator
                    UNPAIR;     # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%setAdministrator
                    UNPAIR;     # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%setAdministrator
                    CDR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%setAdministrator
                    DIG 3;      # @parameter%setAdministrator : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    PAIR;       # pair @parameter%setAdministrator (big_map address (pair (map %approvals address nat) (nat %balance))) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    PAIR;       # pair (pair @parameter%setAdministrator (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    PAIR;       # pair (pair (pair @parameter%setAdministrator (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    NIL operation; # list operation : pair (pair (pair @parameter%setAdministrator (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                  }; # list operation : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair address (pair nat nat)))
              }
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%setPause
                    # == setPause ==
                    # sp.verify(sp.sender == self.data.administrator) # @storage : @parameter%setPause
                    DUP;        # @storage : @storage : @parameter%setPause
                    DUG 2;      # @storage : @parameter%setPause : @storage
                    CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%setPause : @storage
                    CAR;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : @parameter%setPause : @storage
                    CAR;        # address : @parameter%setPause : @storage
                    SENDER;     # address : address : @parameter%setPause : @storage
                    COMPARE;    # int : @parameter%setPause : @storage
                    EQ;         # bool : @parameter%setPause : @storage
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: sp.sender == self.data.administrator"; # string : @parameter%setPause : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setPause : @storage
                    SWAP;       # @storage : @parameter%setPause
                    # self.data.paused = params # @storage : @parameter%setPause
                    UNPAIR;     # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%setPause
                    SWAP;       # pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%setPause
                    UNPAIR;     # pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%setPause
                    CDR;        # pair (nat %rewardAmount) (int %state) : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%setPause
                    DIG 3;      # @parameter%setPause : pair (nat %rewardAmount) (int %state) : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                    PAIR;       # pair @parameter%setPause (pair (nat %rewardAmount) (int %state)) : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                    PAIR;       # pair (pair @parameter%setPause (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                    SWAP;       # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair @parameter%setPause (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    PAIR;       # pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair @parameter%setPause (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                    NIL operation; # list operation : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair @parameter%setPause (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                  }
                  {
                    IF_LEFT
                      {
                        SWAP;       # @storage : @parameter%transfer
                        # == transfer ==
                        # sp.verify((sp.sender == self.data.administrator) | ((~ self.data.paused) & ((params.from_ == sp.sender) | (self.data.balances[params.from_].approvals[sp.sender] >= params.value)))) # @storage : @parameter%transfer
                        DUP;        # @storage : @storage : @parameter%transfer
                        DUG 2;      # @storage : @parameter%transfer : @storage
                        CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%transfer : @storage
                        CAR;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : @parameter%transfer : @storage
                        CAR;        # address : @parameter%transfer : @storage
                        SENDER;     # address : address : @parameter%transfer : @storage
                        COMPARE;    # int : @parameter%transfer : @storage
                        EQ;         # bool : @parameter%transfer : @storage
                        IF
                          {
                            PUSH bool True; # bool : @parameter%transfer : @storage
                          }
                          {
                            SWAP;       # @storage : @parameter%transfer
                            DUP;        # @storage : @storage : @parameter%transfer
                            DUG 2;      # @storage : @parameter%transfer : @storage
                            CDR;        # pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : @storage
                            CAR;        # pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : @parameter%transfer : @storage
                            CAR;        # bool : @parameter%transfer : @storage
                            IF
                              {
                                PUSH bool False; # bool : @parameter%transfer : @storage
                              }
                              {
                                DUP;        # @parameter%transfer : @parameter%transfer : @storage
                                CAR;        # address : @parameter%transfer : @storage
                                SENDER;     # address : address : @parameter%transfer : @storage
                                COMPARE;    # int : @parameter%transfer : @storage
                                EQ;         # bool : @parameter%transfer : @storage
                                IF
                                  {
                                    PUSH bool True; # bool : @parameter%transfer : @storage
                                  }
                                  {
                                    DUP;        # @parameter%transfer : @parameter%transfer : @storage
                                    GET 4;      # nat : @parameter%transfer : @storage
                                    DUP 3;      # @storage : nat : @parameter%transfer : @storage
                                    CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%transfer : @storage
                                    CAR;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : nat : @parameter%transfer : @storage
                                    CDR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : @storage
                                    DUP 3;      # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : @storage
                                    CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : @storage
                                    GET;        # option (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : @storage
                                    IF_SOME
                                      {
                                        # of_some: Get-item:73 # @some : nat : @parameter%transfer : @storage
                                      }
                                      {
                                        PUSH int 73; # int : nat : @parameter%transfer : @storage
                                        FAILWITH;   # FAILED
                                      }; # @some : nat : @parameter%transfer : @storage
                                    CAR;        # map address nat : nat : @parameter%transfer : @storage
                                    SENDER;     # address : map address nat : nat : @parameter%transfer : @storage
                                    GET;        # option nat : nat : @parameter%transfer : @storage
                                    IF_SOME
                                      {
                                        # of_some: Get-item:73 # @some : nat : @parameter%transfer : @storage
                                      }
                                      {
                                        PUSH int 73; # int : nat : @parameter%transfer : @storage
                                        FAILWITH;   # FAILED
                                      }; # @some : nat : @parameter%transfer : @storage
                                    COMPARE;    # int : @parameter%transfer : @storage
                                    GE;         # bool : @parameter%transfer : @storage
                                  }; # bool : @parameter%transfer : @storage
                              }; # bool : @parameter%transfer : @storage
                          }; # bool : @parameter%transfer : @storage
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: (sp.sender == self.data.administrator) | ((~ self.data.paused) & ((params.from_ == sp.sender) | (self.data.balances[params.from_].approvals[sp.sender] >= params.value)))"; # string : @parameter%transfer : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%transfer : @storage
                        SWAP;       # @storage : @parameter%transfer
                        # if ~ (self.data.balances.contains(params.to_)): # @storage : @parameter%transfer
                        DUP;        # @storage : @storage : @parameter%transfer
                        DUG 2;      # @storage : @parameter%transfer : @storage
                        CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%transfer : @storage
                        CAR;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : @parameter%transfer : @storage
                        CDR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%transfer : @storage
                        SWAP;       # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : @storage
                        DUP;        # @parameter%transfer : @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : @storage
                        DUG 2;      # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%transfer : @storage
                        GET 3;      # address : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%transfer : @storage
                        MEM;        # bool : @parameter%transfer : @storage
                        IF
                          {}
                          {
                            SWAP;       # @storage : @parameter%transfer
                            # self.data.balances[params.to_] = sp.record(approvals = {}, balance = 0) # @storage : @parameter%transfer
                            UNPAIR;     # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                            UNPAIR;     # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                            UNPAIR;     # address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                            SWAP;       # big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                            PUSH (option (pair (map %approvals address nat) (nat %balance))) (Some (Pair {} 0)); # option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                            DUP 6;      # @parameter%transfer : option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                            GET 3;      # address : option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                            UPDATE;     # big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                            SWAP;       # address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                            PAIR;       # pair address (big_map address (pair (map %approvals address nat) (nat %balance))) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                            PAIR;       # pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                            PAIR;       # pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : @parameter%transfer
                            SWAP;       # @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                          }; # @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        # sp.verify(self.data.balances[params.from_].balance >= params.value) # @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        DUP;        # @parameter%transfer : @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        GET 4;      # nat : @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        DUP 3;      # pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : nat : @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        CAR;        # pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        CAR;        # pair address (big_map address (pair (map %approvals address nat) (nat %balance))) : nat : @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        CDR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        DUP 3;      # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        GET;        # option (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        IF_SOME
                          {
                            # of_some: Get-item:75 # @some : nat : @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                          }
                          {
                            PUSH int 75; # int : nat : @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                            FAILWITH;   # FAILED
                          }; # @some : nat : @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        CDR;        # nat : nat : @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        COMPARE;    # int : @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        GE;         # bool : @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: self.data.balances[params.from_].balance >= params.value"; # string : @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                            FAILWITH;   # FAILED
                          }; # @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        SWAP;       # pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : @parameter%transfer
                        # self.data.balances[params.from_].balance = sp.as_nat(self.data.balances[params.from_].balance - params.value) # pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : @parameter%transfer
                        DUP;        # pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : @parameter%transfer
                        DUG 2;      # pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        UNPAIR;     # pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        UNPAIR;     # pair address (big_map address (pair (map %approvals address nat) (nat %balance))) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        UNPAIR;     # address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        SWAP;       # big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        DUP;        # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        DUP 6;      # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        DUP;        # address : address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        DUG 2;      # address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        GET;        # option (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        IF_SOME
                          {}
                          {
                            PUSH int 76; # int : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                            FAILWITH;   # FAILED
                          }; # @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        CAR;        # map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        DUP 7;      # @parameter%transfer : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        GET 4;      # nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        DIG 8;      # pair (pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        CAR;        # pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        CAR;        # pair address (big_map address (pair (map %approvals address nat) (nat %balance))) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        CDR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        DUP 9;      # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        GET;        # option (pair (map %approvals address nat) (nat %balance)) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        IF_SOME
                          {
                            # of_some: Get-item:76 # @some : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                          }
                          {
                            PUSH int 76; # int : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                            FAILWITH;   # FAILED
                          }; # @some : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        CDR;        # nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        SUB;        # int : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        ISNAT;      # option nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        IF_SOME
                          {}
                          {
                            PUSH int 76; # int : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                            FAILWITH;   # FAILED
                          }; # @some : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        SWAP;       # map address nat : @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        PAIR;       # pair (map address nat) @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        SOME;       # option (pair (map address nat) @some) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        SWAP;       # address : option (pair (map address nat) @some) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        UPDATE;     # big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        # self.data.balances[params.to_].balance += params.value # big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        DUP;        # big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        DUP 6;      # @parameter%transfer : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        GET 3;      # address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        DUP;        # address : address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        DUG 2;      # address : big_map address (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        GET;        # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        IF_SOME
                          {}
                          {
                            PUSH int 77; # int : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                            FAILWITH;   # FAILED
                          }; # @some : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        UNPAIR;     # map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        SWAP;       # nat : map address nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        DUP 8;      # @parameter%transfer : nat : map address nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        GET 4;      # nat : nat : map address nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        ADD;        # nat : map address nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        SWAP;       # map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        PAIR;       # pair (map address nat) nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        UPDATE;     # big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        SWAP;       # address : big_map address (pair (map address nat) nat) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        PAIR;       # pair address (big_map address (pair (map address nat) nat)) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        PAIR;       # pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                        PAIR;       # pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : @parameter%transfer
                        SWAP;       # @parameter%transfer : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        # if (params.from_ != sp.sender) & (~ (sp.sender == self.data.administrator)): # @parameter%transfer : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        DUP;        # @parameter%transfer : @parameter%transfer : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        CAR;        # address : @parameter%transfer : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        SENDER;     # address : address : @parameter%transfer : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        COMPARE;    # int : @parameter%transfer : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        NEQ;        # bool : @parameter%transfer : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        IF
                          {
                            SWAP;       # pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : @parameter%transfer
                            DUP;        # pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : @parameter%transfer
                            DUG 2;      # pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                            CAR;        # pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                            CAR;        # pair address (big_map address (pair (map address nat) nat)) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                            CAR;        # address : @parameter%transfer : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                            SENDER;     # address : address : @parameter%transfer : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                            COMPARE;    # int : @parameter%transfer : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                            NEQ;        # bool : @parameter%transfer : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                          }
                          {
                            PUSH bool False; # bool : @parameter%transfer : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                          }; # bool : @parameter%transfer : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        IF
                          {
                            SWAP;       # pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : @parameter%transfer
                            # self.data.balances[params.from_].approvals[sp.sender] = sp.as_nat(self.data.balances[params.from_].approvals[sp.sender] - params.value) # pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : @parameter%transfer
                            DUP;        # pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : @parameter%transfer
                            DUG 2;      # pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                            UNPAIR;     # pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                            UNPAIR;     # pair address (big_map address (pair (map address nat) nat)) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                            UNPAIR;     # address : big_map address (pair (map address nat) nat) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                            SWAP;       # big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                            DUP;        # big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                            DUP 6;      # @parameter%transfer : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                            CAR;        # address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                            DUP;        # address : address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                            DUG 2;      # address : big_map address (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                            GET;        # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                            IF_SOME
                              {}
                              {
                                PUSH int 79; # int : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                                FAILWITH;   # FAILED
                              }; # @some : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                            UNPAIR;     # map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                            DUP 8;      # @parameter%transfer : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                            GET 4;      # nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                            DIG 9;      # pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                            CAR;        # pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                            CAR;        # pair address (big_map address (pair (map address nat) nat)) : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                            CDR;        # big_map address (pair (map address nat) nat) : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%transfer
                            DIG 9;      # @parameter%transfer : big_map address (pair (map address nat) nat) : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                            CAR;        # address : big_map address (pair (map address nat) nat) : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                            GET;        # option (pair (map address nat) nat) : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                            IF_SOME
                              {
                                # of_some: Get-item:79 # @some : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                              }
                              {
                                PUSH int 79; # int : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                                FAILWITH;   # FAILED
                              }; # @some : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                            CAR;        # map address nat : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                            SENDER;     # address : map address nat : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                            GET;        # option nat : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                            IF_SOME
                              {
                                # of_some: Get-item:79 # @some : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                              }
                              {
                                PUSH int 79; # int : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                                FAILWITH;   # FAILED
                              }; # @some : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                            SUB;        # int : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                            ISNAT;      # option nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                            IF_SOME
                              {}
                              {
                                PUSH int 79; # int : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                                FAILWITH;   # FAILED
                              }; # @some : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                            SOME;       # option nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                            SENDER;     # address : option nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                            UPDATE;     # map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                            PAIR;       # pair (map address nat) nat : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                            SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                            SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                            UPDATE;     # big_map address (pair (map address nat) nat) : address : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                            SWAP;       # address : big_map address (pair (map address nat) nat) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                            PAIR;       # pair address (big_map address (pair (map address nat) nat)) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                            PAIR;       # pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                            PAIR;       # pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                          }
                          {
                            DROP;       # pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                          }; # pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        NIL operation; # list operation : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                      }
                      {
                        DROP;       # @storage
                        # == updateBalance ==
                        # sp.verify(self.data.state == 0, message = 'bad state') # @storage
                        DUP;        # @storage : @storage
                        CDR;        # pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @storage
                        CAR;        # pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : @storage
                        CDR;        # pair (nat %rewardAmount) (int %state) : @storage
                        CDR;        # int : @storage
                        PUSH int 0; # int : int : @storage
                        COMPARE;    # int : @storage
                        EQ;         # bool : @storage
                        IF
                          {}
                          {
                            PUSH string "bad state"; # string : @storage
                            FAILWITH;   # FAILED
                          }; # @storage
                        # self.data.state = 1 # @storage
                        UNPAIR;     # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        SWAP;       # pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                        UNPAIR;     # pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                        UNPAIR;     # bool : pair (nat %rewardAmount) (int %state) : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                        SWAP;       # pair (nat %rewardAmount) (int %state) : bool : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                        CAR;        # nat : bool : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                        PUSH int 1; # int : nat : bool : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                        SWAP;       # nat : int : bool : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                        PAIR;       # pair nat int : bool : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                        SWAP;       # bool : pair nat int : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                        PAIR;       # pair bool (pair nat int) : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                        PAIR;       # pair (pair bool (pair nat int)) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                        SWAP;       # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair bool (pair nat int)) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        PAIR;       # pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair bool (pair nat int)) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        # sp.transfer((sp.self_address, sp.self_entry_point('updateBalance_callback')), sp.tez(0), sp.contract(sp.TPair(sp.TAddress, sp.TContract(sp.TNat)), self.data.tokenAddress, entry_point='getBalance').open_some()) # pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair bool (pair nat int)) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        DUP;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair bool (pair nat int)) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair bool (pair nat int)) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        GET 5;      # address : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair bool (pair nat int)) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        CONTRACT %getBalance (pair address (contract nat)); # option (contract (pair address (contract nat))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair bool (pair nat int)) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        IF_SOME
                          {}
                          {
                            PUSH int 216; # int : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair bool (pair nat int)) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                            FAILWITH;   # FAILED
                          }; # @some : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair bool (pair nat int)) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        NIL operation; # list operation : @some : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair bool (pair nat int)) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        SWAP;       # @some : list operation : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair bool (pair nat int)) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        PUSH mutez 0; # mutez : @some : list operation : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair bool (pair nat int)) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        SELF %updateBalance_callback; # contract nat : mutez : @some : list operation : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair bool (pair nat int)) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        SELF_ADDRESS; # address : contract nat : mutez : @some : list operation : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair bool (pair nat int)) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        PAIR;       # pair address (contract nat) : mutez : @some : list operation : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair bool (pair nat int)) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair bool (pair nat int)) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                        CONS;       # list operation : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair bool (pair nat int)) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                      }; # list operation : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair bool (pair nat int)) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                  }; # list operation : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair bool (pair nat int)) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
              }; # list operation : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair bool (pair nat int)) (pair address (pair nat nat)))
          }
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%updateBalance_callback
                    # == updateBalance_callback ==
                    # sp.verify(sp.sender == self.data.tokenAddress, message = 'bad sender') # @storage : @parameter%updateBalance_callback
                    DUP;        # @storage : @storage : @parameter%updateBalance_callback
                    DUG 2;      # @storage : @parameter%updateBalance_callback : @storage
                    GET 5;      # address : @parameter%updateBalance_callback : @storage
                    SENDER;     # address : address : @parameter%updateBalance_callback : @storage
                    COMPARE;    # int : @parameter%updateBalance_callback : @storage
                    EQ;         # bool : @parameter%updateBalance_callback : @storage
                    IF
                      {}
                      {
                        PUSH string "bad sender"; # string : @parameter%updateBalance_callback : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%updateBalance_callback : @storage
                    # sp.verify(self.data.state == 1, message = 'bad state') # @parameter%updateBalance_callback : @storage
                    PUSH int 1; # int : @parameter%updateBalance_callback : @storage
                    DUP 3;      # @storage : int : @parameter%updateBalance_callback : @storage
                    CDR;        # pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : int : @parameter%updateBalance_callback : @storage
                    CAR;        # pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : int : @parameter%updateBalance_callback : @storage
                    CDR;        # pair (nat %rewardAmount) (int %state) : int : @parameter%updateBalance_callback : @storage
                    CDR;        # int : int : @parameter%updateBalance_callback : @storage
                    COMPARE;    # int : @parameter%updateBalance_callback : @storage
                    EQ;         # bool : @parameter%updateBalance_callback : @storage
                    IF
                      {}
                      {
                        PUSH string "bad state"; # string : @parameter%updateBalance_callback : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%updateBalance_callback : @storage
                    SWAP;       # @storage : @parameter%updateBalance_callback
                    # self.data.state = 0 # @storage : @parameter%updateBalance_callback
                    UNPAIR;     # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%updateBalance_callback
                    SWAP;       # pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%updateBalance_callback
                    UNPAIR;     # pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%updateBalance_callback
                    UNPAIR;     # bool : pair (nat %rewardAmount) (int %state) : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%updateBalance_callback
                    SWAP;       # pair (nat %rewardAmount) (int %state) : bool : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%updateBalance_callback
                    CAR;        # nat : bool : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%updateBalance_callback
                    PUSH int 0; # int : nat : bool : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%updateBalance_callback
                    SWAP;       # nat : int : bool : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%updateBalance_callback
                    PAIR;       # pair nat int : bool : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%updateBalance_callback
                    SWAP;       # bool : pair nat int : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%updateBalance_callback
                    PAIR;       # pair bool (pair nat int) : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%updateBalance_callback
                    SWAP;       # pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair bool (pair nat int) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%updateBalance_callback
                    # self.data.underlyingBalance = params # pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair bool (pair nat int) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%updateBalance_callback
                    UNPAIR;     # address : pair (nat %totalSupply) (nat %underlyingBalance) : pair bool (pair nat int) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%updateBalance_callback
                    SWAP;       # pair (nat %totalSupply) (nat %underlyingBalance) : address : pair bool (pair nat int) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%updateBalance_callback
                    CAR;        # nat : address : pair bool (pair nat int) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%updateBalance_callback
                    DIG 4;      # @parameter%updateBalance_callback : nat : address : pair bool (pair nat int) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                    SWAP;       # nat : @parameter%updateBalance_callback : address : pair bool (pair nat int) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                    PAIR;       # pair nat @parameter%updateBalance_callback : address : pair bool (pair nat int) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                    SWAP;       # address : pair nat @parameter%updateBalance_callback : pair bool (pair nat int) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                    PAIR;       # pair address (pair nat @parameter%updateBalance_callback) : pair bool (pair nat int) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                    SWAP;       # pair bool (pair nat int) : pair address (pair nat @parameter%updateBalance_callback) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                    PAIR;       # pair (pair bool (pair nat int)) (pair address (pair nat @parameter%updateBalance_callback)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                    SWAP;       # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair bool (pair nat int)) (pair address (pair nat @parameter%updateBalance_callback))
                    PAIR;       # pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair bool (pair nat int)) (pair address (pair nat @parameter%updateBalance_callback)))
                  }
                  {
                    SWAP;       # @storage : @parameter%updateDexterAddress
                    # == updateDexterAddress ==
                    # sp.verify(sp.sender == self.data.governorAddress, message = 'not governor') # @storage : @parameter%updateDexterAddress
                    DUP;        # @storage : @storage : @parameter%updateDexterAddress
                    DUG 2;      # @storage : @parameter%updateDexterAddress : @storage
                    CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%updateDexterAddress : @storage
                    CDR;        # pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : @parameter%updateDexterAddress : @storage
                    CDR;        # pair (address %governorAddress) (address %ovenRegistryAddress) : @parameter%updateDexterAddress : @storage
                    CAR;        # address : @parameter%updateDexterAddress : @storage
                    SENDER;     # address : address : @parameter%updateDexterAddress : @storage
                    COMPARE;    # int : @parameter%updateDexterAddress : @storage
                    EQ;         # bool : @parameter%updateDexterAddress : @storage
                    IF
                      {}
                      {
                        PUSH string "not governor"; # string : @parameter%updateDexterAddress : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%updateDexterAddress : @storage
                    SWAP;       # @storage : @parameter%updateDexterAddress
                    # self.data.dexterAddress = params # @storage : @parameter%updateDexterAddress
                    UNPAIR;     # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%updateDexterAddress
                    UNPAIR;     # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%updateDexterAddress
                    SWAP;       # pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%updateDexterAddress
                    CDR;        # pair (address %governorAddress) (address %ovenRegistryAddress) : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%updateDexterAddress
                    DIG 3;      # @parameter%updateDexterAddress : pair (address %governorAddress) (address %ovenRegistryAddress) : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    PAIR;       # pair @parameter%updateDexterAddress (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    SWAP;       # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair @parameter%updateDexterAddress (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    PAIR;       # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair @parameter%updateDexterAddress (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    PAIR;       # pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair @parameter%updateDexterAddress (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                  }; # pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair address (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair bool (pair nat int)) (pair address (pair nat nat)))
              }
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%updateGovernorAddress
                    # == updateGovernorAddress ==
                    # sp.verify(sp.sender == self.data.governorAddress, message = 'not governor') # @storage : @parameter%updateGovernorAddress
                    DUP;        # @storage : @storage : @parameter%updateGovernorAddress
                    DUG 2;      # @storage : @parameter%updateGovernorAddress : @storage
                    CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%updateGovernorAddress : @storage
                    CDR;        # pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : @parameter%updateGovernorAddress : @storage
                    CDR;        # pair (address %governorAddress) (address %ovenRegistryAddress) : @parameter%updateGovernorAddress : @storage
                    CAR;        # address : @parameter%updateGovernorAddress : @storage
                    SENDER;     # address : address : @parameter%updateGovernorAddress : @storage
                    COMPARE;    # int : @parameter%updateGovernorAddress : @storage
                    EQ;         # bool : @parameter%updateGovernorAddress : @storage
                    IF
                      {}
                      {
                        PUSH string "not governor"; # string : @parameter%updateGovernorAddress : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%updateGovernorAddress : @storage
                    SWAP;       # @storage : @parameter%updateGovernorAddress
                    # self.data.governorAddress = params # @storage : @parameter%updateGovernorAddress
                    UNPAIR;     # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%updateGovernorAddress
                    UNPAIR;     # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%updateGovernorAddress
                    SWAP;       # pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%updateGovernorAddress
                    UNPAIR;     # address : pair (address %governorAddress) (address %ovenRegistryAddress) : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%updateGovernorAddress
                    SWAP;       # pair (address %governorAddress) (address %ovenRegistryAddress) : address : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%updateGovernorAddress
                    CDR;        # address : address : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%updateGovernorAddress
                    DIG 4;      # @parameter%updateGovernorAddress : address : address : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    PAIR;       # pair @parameter%updateGovernorAddress address : address : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    SWAP;       # address : pair @parameter%updateGovernorAddress address : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    PAIR;       # pair address (pair @parameter%updateGovernorAddress address) : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    SWAP;       # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair address (pair @parameter%updateGovernorAddress address) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    PAIR;       # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair address (pair @parameter%updateGovernorAddress address)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                    PAIR;       # pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair address (pair @parameter%updateGovernorAddress address))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                  }
                  {
                    IF_LEFT
                      {
                        SWAP;       # @storage : @parameter%updateOvenRegistryAddress
                        # == updateOvenRegistryAddress ==
                        # sp.verify(sp.sender == self.data.governorAddress, message = 'not governor') # @storage : @parameter%updateOvenRegistryAddress
                        DUP;        # @storage : @storage : @parameter%updateOvenRegistryAddress
                        DUG 2;      # @storage : @parameter%updateOvenRegistryAddress : @storage
                        CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%updateOvenRegistryAddress : @storage
                        CDR;        # pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : @parameter%updateOvenRegistryAddress : @storage
                        CDR;        # pair (address %governorAddress) (address %ovenRegistryAddress) : @parameter%updateOvenRegistryAddress : @storage
                        CAR;        # address : @parameter%updateOvenRegistryAddress : @storage
                        SENDER;     # address : address : @parameter%updateOvenRegistryAddress : @storage
                        COMPARE;    # int : @parameter%updateOvenRegistryAddress : @storage
                        EQ;         # bool : @parameter%updateOvenRegistryAddress : @storage
                        IF
                          {}
                          {
                            PUSH string "not governor"; # string : @parameter%updateOvenRegistryAddress : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%updateOvenRegistryAddress : @storage
                        SWAP;       # @storage : @parameter%updateOvenRegistryAddress
                        # self.data.ovenRegistryAddress = params # @storage : @parameter%updateOvenRegistryAddress
                        UNPAIR;     # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%updateOvenRegistryAddress
                        UNPAIR;     # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%updateOvenRegistryAddress
                        SWAP;       # pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%updateOvenRegistryAddress
                        UNPAIR;     # address : pair (address %governorAddress) (address %ovenRegistryAddress) : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%updateOvenRegistryAddress
                        SWAP;       # pair (address %governorAddress) (address %ovenRegistryAddress) : address : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%updateOvenRegistryAddress
                        CAR;        # address : address : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%updateOvenRegistryAddress
                        DIG 4;      # @parameter%updateOvenRegistryAddress : address : address : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        SWAP;       # address : @parameter%updateOvenRegistryAddress : address : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        PAIR;       # pair address @parameter%updateOvenRegistryAddress : address : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        SWAP;       # address : pair address @parameter%updateOvenRegistryAddress : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        PAIR;       # pair address (pair address @parameter%updateOvenRegistryAddress) : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        SWAP;       # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair address (pair address @parameter%updateOvenRegistryAddress) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        PAIR;       # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair address (pair address @parameter%updateOvenRegistryAddress)) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        PAIR;       # pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair address (pair address @parameter%updateOvenRegistryAddress))) (pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                      }
                      {
                        SWAP;       # @storage : @parameter%updateRewardAmount
                        # == updateRewardAmount ==
                        # sp.verify(sp.sender == self.data.governorAddress, message = 'not governor') # @storage : @parameter%updateRewardAmount
                        DUP;        # @storage : @storage : @parameter%updateRewardAmount
                        DUG 2;      # @storage : @parameter%updateRewardAmount : @storage
                        CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%updateRewardAmount : @storage
                        CDR;        # pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)) : @parameter%updateRewardAmount : @storage
                        CDR;        # pair (address %governorAddress) (address %ovenRegistryAddress) : @parameter%updateRewardAmount : @storage
                        CAR;        # address : @parameter%updateRewardAmount : @storage
                        SENDER;     # address : address : @parameter%updateRewardAmount : @storage
                        COMPARE;    # int : @parameter%updateRewardAmount : @storage
                        EQ;         # bool : @parameter%updateRewardAmount : @storage
                        IF
                          {}
                          {
                            PUSH string "not governor"; # string : @parameter%updateRewardAmount : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%updateRewardAmount : @storage
                        SWAP;       # @storage : @parameter%updateRewardAmount
                        # self.data.rewardAmount = params # @storage : @parameter%updateRewardAmount
                        UNPAIR;     # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : @parameter%updateRewardAmount
                        SWAP;       # pair (pair (bool %paused) (pair (nat %rewardAmount) (int %state))) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%updateRewardAmount
                        UNPAIR;     # pair (bool %paused) (pair (nat %rewardAmount) (int %state)) : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%updateRewardAmount
                        UNPAIR;     # bool : pair (nat %rewardAmount) (int %state) : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%updateRewardAmount
                        SWAP;       # pair (nat %rewardAmount) (int %state) : bool : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%updateRewardAmount
                        CDR;        # int : bool : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : @parameter%updateRewardAmount
                        DIG 4;      # @parameter%updateRewardAmount : int : bool : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                        PAIR;       # pair @parameter%updateRewardAmount int : bool : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                        SWAP;       # bool : pair @parameter%updateRewardAmount int : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                        PAIR;       # pair bool (pair @parameter%updateRewardAmount int) : pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                        PAIR;       # pair (pair bool (pair @parameter%updateRewardAmount int)) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))) : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))
                        SWAP;       # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress))) : pair (pair bool (pair @parameter%updateRewardAmount int)) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance)))
                        PAIR;       # pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (address %dexterAddress) (pair (address %governorAddress) (address %ovenRegistryAddress)))) (pair (pair bool (pair @parameter%updateRewardAmount int)) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                      }; # pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair address (pair address address))) (pair (pair bool (pair nat int)) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
                  }; # pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair address (pair address address))) (pair (pair bool (pair nat int)) (pair (address %tokenAddress) (pair (nat %totalSupply) (nat %underlyingBalance))))
              }; # pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair address (pair address address))) (pair (pair bool (pair nat int)) (pair address (pair nat nat)))
            NIL operation; # list operation : pair (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair address (pair address address))) (pair (pair bool (pair nat int)) (pair address (pair nat nat)))
          }; # list operation : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair address (pair address address))) (pair (pair bool (pair nat int)) (pair address (pair nat nat)))
      }; # list operation : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair address (pair address address))) (pair (pair bool (pair nat int)) (pair address (pair nat nat)))
    NIL operation; # list operation : list operation : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair address (pair address address))) (pair (pair bool (pair nat int)) (pair address (pair nat nat)))
    SWAP;       # list operation : list operation : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair address (pair address address))) (pair (pair bool (pair nat int)) (pair address (pair nat nat)))
    ITER
      {
        CONS;       # list operation : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair address (pair address address))) (pair (pair bool (pair nat int)) (pair address (pair nat nat)))
      }; # list operation : pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair address (pair address address))) (pair (pair bool (pair nat int)) (pair address (pair nat nat)))
    PAIR;       # pair (list operation) (pair (pair (pair address (big_map address (pair (map address nat) nat))) (pair address (pair address address))) (pair (pair bool (pair nat int)) (pair address (pair nat nat))))
  };