parameter (or (or (or (or (pair %approve (address %spender) (nat %value)) (pair %burn (address %address) (nat %value))) (or (unit %default) (nat %deposit))) (or (or (nat %deposit_callback) (pair %getAllowance (pair (address %owner) (address %spender)) (contract nat))) (or (pair %getBalance address (contract nat)) (or (pair %getTotalSupply unit (contract nat)) (address %liquidate))))) (or (or (or (pair %mint (address %address) (nat %value)) (nat %redeem)) (or (nat %redeem_callback) (or (pair %transfer (address %from) (pair (address %to) (nat %value))) (pair %updateContractMetadata string bytes)))) (or (or (address %updateGovernorAddress) (address %updateOvenRegistryAddress)) (or (address %updateQuipuswapAddress) (or (nat %updateRewardPercent) (pair %updateTokenMetadata nat (map string bytes)))))));
storage   (pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        IF_LEFT
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%approve
                    # == approve ==
                    # if ~ (self.data.balances.contains(sp.sender)): # @storage : @parameter%approve
                    DUP;        # @storage : @storage : @parameter%approve
                    DUG 2;      # @storage : @parameter%approve : @storage
                    CAR;        # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%approve : @storage
                    CAR;        # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : @parameter%approve : @storage
                    CAR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%approve : @storage
                    SENDER;     # address : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%approve : @storage
                    MEM;        # bool : @parameter%approve : @storage
                    IF
                      {}
                      {
                        SWAP;       # @storage : @parameter%approve
                        # self.data.balances[sp.sender] = sp.record(approvals = {}, balance = 0) # @storage : @parameter%approve
                        UNPAIR;     # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%approve
                        UNPAIR;     # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%approve
                        UNPAIR;     # big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%approve
                        PUSH (option (pair (map %approvals address nat) (nat %balance))) (Some (Pair {} 0)); # option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%approve
                        SENDER;     # address : option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%approve
                        UPDATE;     # big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%approve
                        PAIR;       # pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%approve
                        PAIR;       # pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%approve
                        PAIR;       # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%approve
                        SWAP;       # @parameter%approve : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                      }; # @parameter%approve : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    # sp.verify(~ False, message = 'PAUSED')
                    # sp.verify((self.data.balances[sp.sender].approvals.get(params.spender, default_value = 0) == 0) | (params.value == 0), message = 'UNSAFE_ALLOWANCE_CHANGE') # @parameter%approve : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    PUSH nat 0; # nat : @parameter%approve : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    DUP 3;      # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : nat : @parameter%approve : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CAR;        # pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : nat : @parameter%approve : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CAR;        # pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : nat : @parameter%approve : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CAR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%approve : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    SENDER;     # address : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%approve : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    GET;        # option (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%approve : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    IF_SOME
                      {
                        # of_some: Get-item:52 # @some : nat : @parameter%approve : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                      }
                      {
                        PUSH (pair string int) (Pair "GetItem" 52); # pair string int : nat : @parameter%approve : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        FAILWITH;   # FAILED
                      }; # @some : nat : @parameter%approve : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CAR;        # map address nat : nat : @parameter%approve : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    DUP 3;      # @parameter%approve : map address nat : nat : @parameter%approve : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CAR;        # address : map address nat : nat : @parameter%approve : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    GET;        # option nat : nat : @parameter%approve : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    IF_SOME
                      {
                        # of_some: Get-item:52 # @some : nat : @parameter%approve : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                      }
                      {
                        PUSH nat 0; # nat : nat : @parameter%approve : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                      }; # nat : nat : @parameter%approve : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    COMPARE;    # int : @parameter%approve : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    EQ;         # bool : @parameter%approve : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    IF
                      {
                        PUSH bool True; # bool : @parameter%approve : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                      }
                      {
                        DUP;        # @parameter%approve : @parameter%approve : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        CDR;        # nat : @parameter%approve : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        PUSH nat 0; # nat : nat : @parameter%approve : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        COMPARE;    # int : @parameter%approve : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        EQ;         # bool : @parameter%approve : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                      }; # bool : @parameter%approve : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    IF
                      {}
                      {
                        PUSH (pair string int) (Pair "verify" 53); # pair string int : @parameter%approve : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        FAILWITH;   # FAILED
                      }; # @parameter%approve : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    SWAP;       # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%approve
                    # self.data.balances[sp.sender].approvals[params.spender] = params.value # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%approve
                    UNPAIR;     # pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%approve
                    UNPAIR;     # pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%approve
                    UNPAIR;     # big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%approve
                    DUP;        # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%approve
                    SENDER;     # address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%approve
                    DUP;        # address : address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%approve
                    DUG 2;      # address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%approve
                    GET;        # option (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%approve
                    IF_SOME
                      {}
                      {
                        PUSH (pair string int) (Pair "unzip_option" 54); # pair string int : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%approve
                        FAILWITH;   # FAILED
                      }; # @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%approve
                    UNPAIR;     # map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%approve
                    DUP 8;      # @parameter%approve : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%approve
                    CDR;        # nat : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%approve
                    SOME;       # option nat : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%approve
                    DIG 8;      # @parameter%approve : option nat : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                    CAR;        # address : option nat : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                    UPDATE;     # map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                    PAIR;       # pair (map address nat) nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                    SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                    SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                    UPDATE;     # big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                    PAIR;       # pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                    PAIR;       # pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                    PAIR;       # pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                  }
                  {
                    # == burn ==
                    # sp.verify(False | (sp.sender == sp.self_address), message = 'NOT_ALLOWED') # @parameter%burn : @storage
                    SELF_ADDRESS; # address : @parameter%burn : @storage
                    SENDER;     # address : address : @parameter%burn : @storage
                    COMPARE;    # int : @parameter%burn : @storage
                    EQ;         # bool : @parameter%burn : @storage
                    IF
                      {}
                      {
                        PUSH (pair string int) (Pair "verify" 98); # pair string int : @parameter%burn : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%burn : @storage
                    # sp.verify(self.data.balances[params.address].balance >= params.value, message = 'LOW_BALANCE') # @parameter%burn : @storage
                    DUP;        # @parameter%burn : @parameter%burn : @storage
                    CDR;        # nat : @parameter%burn : @storage
                    DUP 3;      # @storage : nat : @parameter%burn : @storage
                    CAR;        # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : nat : @parameter%burn : @storage
                    CAR;        # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : nat : @parameter%burn : @storage
                    CAR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%burn : @storage
                    DUP 3;      # @parameter%burn : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%burn : @storage
                    CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%burn : @storage
                    GET;        # option (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%burn : @storage
                    IF_SOME
                      {
                        # of_some: Get-item:100 # @some : nat : @parameter%burn : @storage
                      }
                      {
                        PUSH (pair string int) (Pair "GetItem" 100); # pair string int : nat : @parameter%burn : @storage
                        FAILWITH;   # FAILED
                      }; # @some : nat : @parameter%burn : @storage
                    CDR;        # nat : nat : @parameter%burn : @storage
                    COMPARE;    # int : @parameter%burn : @storage
                    GE;         # bool : @parameter%burn : @storage
                    IF
                      {}
                      {
                        PUSH (pair string int) (Pair "verify" 100); # pair string int : @parameter%burn : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%burn : @storage
                    SWAP;       # @storage : @parameter%burn
                    # self.data.balances[params.address].balance = sp.as_nat(self.data.balances[params.address].balance - params.value) # @storage : @parameter%burn
                    DUP;        # @storage : @storage : @parameter%burn
                    DUG 2;      # @storage : @parameter%burn : @storage
                    UNPAIR;     # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn : @storage
                    UNPAIR;     # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn : @storage
                    UNPAIR;     # big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn : @storage
                    DUP;        # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn : @storage
                    DUP 6;      # @parameter%burn : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn : @storage
                    CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn : @storage
                    DUP;        # address : address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn : @storage
                    DUG 2;      # address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn : @storage
                    GET;        # option (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn : @storage
                    IF_SOME
                      {}
                      {
                        PUSH (pair string int) (Pair "unzip_option" 101); # pair string int : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn : @storage
                        FAILWITH;   # FAILED
                      }; # @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn : @storage
                    CAR;        # map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn : @storage
                    DUP 7;      # @parameter%burn : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn : @storage
                    CDR;        # nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn : @storage
                    DIG 8;      # @storage : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn
                    CAR;        # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn
                    CAR;        # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn
                    CAR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn
                    DUP 9;      # @parameter%burn : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn
                    CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn
                    GET;        # option (pair (map %approvals address nat) (nat %balance)) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn
                    IF_SOME
                      {
                        # of_some: Get-item:101 # @some : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn
                      }
                      {
                        PUSH (pair string int) (Pair "GetItem" 101); # pair string int : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn
                        FAILWITH;   # FAILED
                      }; # @some : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn
                    CDR;        # nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn
                    SUB;        # int : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn
                    ISNAT;      # option nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn
                    IF_SOME
                      {}
                      {
                        PUSH (pair string int) (Pair "OpenVariant" 101); # pair string int : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn
                        FAILWITH;   # FAILED
                      }; # @some : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn
                    SWAP;       # map address nat : @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn
                    PAIR;       # pair (map address nat) @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn
                    SOME;       # option (pair (map address nat) @some) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn
                    SWAP;       # address : option (pair (map address nat) @some) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn
                    UPDATE;     # big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn
                    PAIR;       # pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn
                    PAIR;       # pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn
                    PAIR;       # pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%burn
                    # self.data.totalSupply = sp.as_nat(self.data.totalSupply - params.value) # pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%burn
                    DUP;        # pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%burn
                    DUG 2;      # pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%burn : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    UNPAIR;     # pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%burn : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    SWAP;       # pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%burn : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    UNPAIR;     # pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%burn : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    SWAP;       # pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%burn : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    UNPAIR;     # pair (int %state) (address %tokenAddress) : pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%burn : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    SWAP;       # pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply) : pair (int %state) (address %tokenAddress) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%burn : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CAR;        # big_map nat (pair nat (map string bytes)) : pair (int %state) (address %tokenAddress) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%burn : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    DIG 4;      # @parameter%burn : big_map nat (pair nat (map string bytes)) : pair (int %state) (address %tokenAddress) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CDR;        # nat : big_map nat (pair nat (map string bytes)) : pair (int %state) (address %tokenAddress) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    DIG 5;      # pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : nat : big_map nat (pair nat (map string bytes)) : pair (int %state) (address %tokenAddress) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    GET 8;      # nat : nat : big_map nat (pair nat (map string bytes)) : pair (int %state) (address %tokenAddress) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    SUB;        # int : big_map nat (pair nat (map string bytes)) : pair (int %state) (address %tokenAddress) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    ISNAT;      # option nat : big_map nat (pair nat (map string bytes)) : pair (int %state) (address %tokenAddress) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    IF_SOME
                      {}
                      {
                        PUSH (pair string int) (Pair "OpenVariant" 102); # pair string int : big_map nat (pair nat (map string bytes)) : pair (int %state) (address %tokenAddress) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                        FAILWITH;   # FAILED
                      }; # @some : big_map nat (pair nat (map string bytes)) : pair (int %state) (address %tokenAddress) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    SWAP;       # big_map nat (pair nat (map string bytes)) : @some : pair (int %state) (address %tokenAddress) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    PAIR;       # pair (big_map nat (pair nat (map string bytes))) @some : pair (int %state) (address %tokenAddress) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    SWAP;       # pair (int %state) (address %tokenAddress) : pair (big_map nat (pair nat (map string bytes))) @some : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    PAIR;       # pair (pair (int %state) (address %tokenAddress)) (pair (big_map nat (pair nat (map string bytes))) @some) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    SWAP;       # pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (int %state) (address %tokenAddress)) (pair (big_map nat (pair nat (map string bytes))) @some) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    PAIR;       # pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map nat (pair nat (map string bytes))) @some)) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    SWAP;       # pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map nat (pair nat (map string bytes))) @some))
                    PAIR;       # pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map nat (pair nat (map string bytes))) @some)))
                  }; # pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map nat (pair nat (map string bytes))) nat)))
                NIL operation; # list operation : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map nat (pair nat (map string bytes))) nat)))
              }
              {
                IF_LEFT
                  {
                    DROP;       # @storage
                    # == default ==
                    # sp.send(sp.source, sp.split_tokens(sp.amount, self.data.rewardPercent, 100)) # @storage
                    NIL operation; # list operation : @storage
                    SOURCE;     # address : list operation : @storage
                    CONTRACT unit; # option (contract unit) : list operation : @storage
                    IF_SOME
                      {}
                      {
                        PUSH (pair string int) (Pair "OpenVariant" 141); # pair string int : list operation : @storage
                        FAILWITH;   # FAILED
                      }; # @some : list operation : @storage
                    PUSH nat 100; # nat : @some : list operation : @storage
                    AMOUNT;     # mutez : nat : @some : list operation : @storage
                    DUP 5;      # @storage : mutez : nat : @some : list operation : @storage
                    CAR;        # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : mutez : nat : @some : list operation : @storage
                    CDR;        # pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : mutez : nat : @some : list operation : @storage
                    CDR;        # pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent) : mutez : nat : @some : list operation : @storage
                    CDR;        # nat : mutez : nat : @some : list operation : @storage
                    MUL;        # mutez : nat : @some : list operation : @storage
                    EDIV;       # option (pair mutez mutez) : @some : list operation : @storage
                    IF_SOME
                      {
                        # sp.split_tokens(sp.amount, self.data.rewardPercent, 100) # @some : @some : list operation : @storage
                      }
                      {
                        PUSH (pair string int) (Pair "OfSome" 140); # pair string int : @some : list operation : @storage
                        FAILWITH;   # FAILED
                      }; # @some : @some : list operation : @storage
                    CAR;        # mutez : @some : list operation : @storage
                    UNIT;       # unit : mutez : @some : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                    SWAP;       # @storage : list operation
                    # sp.transfer((1, sp.self_address), sp.balance - sp.split_tokens(sp.amount, self.data.rewardPercent, 100), sp.contract(sp.TPair(sp.TNat, sp.TAddress), self.data.quipuswapAddress, entry_point='tezToTokenPayment').open_some()) # @storage : list operation
                    DUP;        # @storage : @storage : list operation
                    DUG 2;      # @storage : list operation : @storage
                    CAR;        # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation : @storage
                    CDR;        # pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : list operation : @storage
                    CAR;        # pair (address %ovenRegistryAddress) (address %quipuswapAddress) : list operation : @storage
                    CDR;        # address : list operation : @storage
                    CONTRACT %tezToTokenPayment (pair nat address); # option (contract (pair nat address)) : list operation : @storage
                    IF_SOME
                      {}
                      {
                        PUSH (pair string int) (Pair "OpenVariant" 149); # pair string int : list operation : @storage
                        FAILWITH;   # FAILED
                      }; # @some : list operation : @storage
                    PUSH nat 100; # nat : @some : list operation : @storage
                    AMOUNT;     # mutez : nat : @some : list operation : @storage
                    DUP 5;      # @storage : mutez : nat : @some : list operation : @storage
                    CAR;        # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : mutez : nat : @some : list operation : @storage
                    CDR;        # pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : mutez : nat : @some : list operation : @storage
                    CDR;        # pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent) : mutez : nat : @some : list operation : @storage
                    CDR;        # nat : mutez : nat : @some : list operation : @storage
                    MUL;        # mutez : nat : @some : list operation : @storage
                    EDIV;       # option (pair mutez mutez) : @some : list operation : @storage
                    IF_SOME
                      {
                        # sp.split_tokens(sp.amount, self.data.rewardPercent, 100) # @some : @some : list operation : @storage
                      }
                      {
                        PUSH (pair string int) (Pair "OfSome" 140); # pair string int : @some : list operation : @storage
                        FAILWITH;   # FAILED
                      }; # @some : @some : list operation : @storage
                    CAR;        # mutez : @some : list operation : @storage
                    BALANCE;    # mutez : mutez : @some : list operation : @storage
                    SUB;        # mutez : @some : list operation : @storage
                    SELF_ADDRESS; # address : mutez : @some : list operation : @storage
                    PUSH nat 1; # nat : address : mutez : @some : list operation : @storage
                    PAIR;       # pair nat address : mutez : @some : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                  }
                  {
                    # == deposit ==
                    # sp.verify(self.data.state == 0, message = 'bad state') # @parameter%deposit : @storage
                    PUSH int 0; # int : @parameter%deposit : @storage
                    DUP 3;      # @storage : int : @parameter%deposit : @storage
                    CDR;        # pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : int : @parameter%deposit : @storage
                    CDR;        # pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : int : @parameter%deposit : @storage
                    CAR;        # pair (int %state) (address %tokenAddress) : int : @parameter%deposit : @storage
                    CAR;        # int : int : @parameter%deposit : @storage
                    COMPARE;    # int : @parameter%deposit : @storage
                    EQ;         # bool : @parameter%deposit : @storage
                    IF
                      {}
                      {
                        PUSH (pair string int) (Pair "verify" 187); # pair string int : @parameter%deposit : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%deposit : @storage
                    SWAP;       # @storage : @parameter%deposit
                    # self.data.state = 3 # @storage : @parameter%deposit
                    UNPAIR;     # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%deposit
                    SWAP;       # pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%deposit
                    UNPAIR;     # pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%deposit
                    SWAP;       # pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%deposit
                    UNPAIR;     # pair (int %state) (address %tokenAddress) : pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%deposit
                    CDR;        # address : pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%deposit
                    PUSH int 3; # int : address : pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%deposit
                    PAIR;       # pair int address : pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%deposit
                    PAIR;       # pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%deposit
                    SWAP;       # pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%deposit
                    # self.data.savedState_tokensToDeposit = sp.some(params) # pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%deposit
                    UNPAIR;     # pair (option %savedState_depositor address) (option %savedState_redeemer address) : pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%deposit
                    SWAP;       # pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat) : pair (option %savedState_depositor address) (option %savedState_redeemer address) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%deposit
                    CDR;        # option nat : pair (option %savedState_depositor address) (option %savedState_redeemer address) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%deposit
                    DIG 4;      # @parameter%deposit : option nat : pair (option %savedState_depositor address) (option %savedState_redeemer address) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    SOME;       # option nat : option nat : pair (option %savedState_depositor address) (option %savedState_redeemer address) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    PAIR;       # pair (option nat) (option nat) : pair (option %savedState_depositor address) (option %savedState_redeemer address) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    SWAP;       # pair (option %savedState_depositor address) (option %savedState_redeemer address) : pair (option nat) (option nat) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    # self.data.savedState_depositor = sp.some(sp.sender) # pair (option %savedState_depositor address) (option %savedState_redeemer address) : pair (option nat) (option nat) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    CDR;        # option address : pair (option nat) (option nat) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    SENDER;     # address : option address : pair (option nat) (option nat) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    SOME;       # option address : option address : pair (option nat) (option nat) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    PAIR;       # pair (option address) (option address) : pair (option nat) (option nat) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    PAIR;       # pair (pair (option address) (option address)) (pair (option nat) (option nat)) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    PAIR;       # pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    SWAP;       # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                    PAIR;       # pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    # sp.transfer((sp.self_address, sp.self_entry_point('deposit_callback')), sp.tez(0), sp.contract(sp.TPair(sp.TAddress, sp.TContract(sp.TNat)), self.data.tokenAddress, entry_point='getBalance').open_some()) # pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    DUP;        # pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CDR;        # pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CDR;        # pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CAR;        # pair int address : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CDR;        # address : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CONTRACT %getBalance (pair address (contract nat)); # option (contract (pair address (contract nat))) : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    IF_SOME
                      {}
                      {
                        PUSH (pair string int) (Pair "OpenVariant" 196); # pair string int : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        FAILWITH;   # FAILED
                      }; # @some : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    NIL operation; # list operation : @some : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    SWAP;       # @some : list operation : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    PUSH mutez 0; # mutez : @some : list operation : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    SELF %deposit_callback; # contract nat : mutez : @some : list operation : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    SELF_ADDRESS; # address : contract nat : mutez : @some : list operation : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    PAIR;       # pair address (contract nat) : mutez : @some : list operation : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CONS;       # list operation : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                  }; # list operation : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
              }; # list operation : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map nat (pair nat (map string bytes))) nat)))
          }
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%deposit_callback
                    # == deposit_callback ==
                    # sp.verify(sp.sender == self.data.tokenAddress, message = 'bad sender') # @storage : @parameter%deposit_callback
                    DUP;        # @storage : @storage : @parameter%deposit_callback
                    DUG 2;      # @storage : @parameter%deposit_callback : @storage
                    CDR;        # pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%deposit_callback : @storage
                    CDR;        # pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : @parameter%deposit_callback : @storage
                    CAR;        # pair (int %state) (address %tokenAddress) : @parameter%deposit_callback : @storage
                    CDR;        # address : @parameter%deposit_callback : @storage
                    SENDER;     # address : address : @parameter%deposit_callback : @storage
                    COMPARE;    # int : @parameter%deposit_callback : @storage
                    EQ;         # bool : @parameter%deposit_callback : @storage
                    IF
                      {}
                      {
                        PUSH (pair string int) (Pair "verify" 209); # pair string int : @parameter%deposit_callback : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%deposit_callback : @storage
                    # sp.verify(self.data.state == 3, message = 'bad state') # @parameter%deposit_callback : @storage
                    PUSH int 3; # int : @parameter%deposit_callback : @storage
                    DUP 3;      # @storage : int : @parameter%deposit_callback : @storage
                    CDR;        # pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : int : @parameter%deposit_callback : @storage
                    CDR;        # pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : int : @parameter%deposit_callback : @storage
                    CAR;        # pair (int %state) (address %tokenAddress) : int : @parameter%deposit_callback : @storage
                    CAR;        # int : int : @parameter%deposit_callback : @storage
                    COMPARE;    # int : @parameter%deposit_callback : @storage
                    EQ;         # bool : @parameter%deposit_callback : @storage
                    IF
                      {}
                      {
                        PUSH (pair string int) (Pair "verify" 212); # pair string int : @parameter%deposit_callback : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%deposit_callback : @storage
                    SWAP;       # @storage : @parameter%deposit_callback
                    # tokensToDeposit = sp.local("tokensToDeposit", self.data.savedState_tokensToDeposit.open_some()) # @storage : @parameter%deposit_callback
                    DUP;        # @storage : @storage : @parameter%deposit_callback
                    DUG 2;      # @storage : @parameter%deposit_callback : @storage
                    CDR;        # pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%deposit_callback : @storage
                    CAR;        # pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : @parameter%deposit_callback : @storage
                    CDR;        # pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat) : @parameter%deposit_callback : @storage
                    CAR;        # option nat : @parameter%deposit_callback : @storage
                    IF_SOME
                      {}
                      {
                        PUSH (pair string int) (Pair "OpenVariant" 215); # pair string int : @parameter%deposit_callback : @storage
                        FAILWITH;   # FAILED
                      }; # @some : @parameter%deposit_callback : @storage
                    # newTokens = sp.local("newTokens", tokensToDeposit.value * 1000000000000000000) # @some : @parameter%deposit_callback : @storage
                    DUP;        # @some : @some : @parameter%deposit_callback : @storage
                    PUSH nat 1000000000000000000; # nat : @some : @some : @parameter%deposit_callback : @storage
                    MUL;        # nat : @some : @parameter%deposit_callback : @storage
                    # if self.data.totalSupply != 0: # nat : @some : @parameter%deposit_callback : @storage
                    PUSH nat 0; # nat : nat : @some : @parameter%deposit_callback : @storage
                    DUP 5;      # @storage : nat : nat : @some : @parameter%deposit_callback : @storage
                    GET 8;      # nat : nat : nat : @some : @parameter%deposit_callback : @storage
                    COMPARE;    # int : nat : @some : @parameter%deposit_callback : @storage
                    NEQ;        # bool : nat : @some : @parameter%deposit_callback : @storage
                    IF
                      {
                        DROP;       # @some : @parameter%deposit_callback : @storage
                        # newUnderlyingBalance = sp.local("newUnderlyingBalance", params + tokensToDeposit.value) # @some : @parameter%deposit_callback : @storage
                        DUP;        # @some : @some : @parameter%deposit_callback : @storage
                        DIG 2;      # @parameter%deposit_callback : @some : @some : @storage
                        ADD;        # nat : @some : @storage
                        # fractionOfPoolOwnership = sp.local("fractionOfPoolOwnership", (tokensToDeposit.value * 1000000000000000000) // newUnderlyingBalance.value) # nat : @some : @storage
                        PUSH nat 1000000000000000000; # nat : nat : @some : @storage
                        DUP 3;      # @some : nat : nat : @some : @storage
                        MUL;        # nat : nat : @some : @storage
                        EDIV;       # option (pair nat nat) : @some : @storage
                        IF_SOME
                          {
                            CAR;        # nat : @some : @storage
                          }
                          {
                            PUSH (pair string int) (Pair "DivisionByZero" 219); # pair string int : @some : @storage
                            FAILWITH;   # FAILED
                          }; # nat : @some : @storage
                        # newTokens.value = (fractionOfPoolOwnership.value * self.data.totalSupply) // sp.as_nat(1000000000000000000 - fractionOfPoolOwnership.value) # nat : @some : @storage
                        DUP;        # nat : nat : @some : @storage
                        PUSH nat 1000000000000000000; # nat : nat : nat : @some : @storage
                        SUB;        # int : nat : @some : @storage
                        ISNAT;      # option nat : nat : @some : @storage
                        IF_SOME
                          {}
                          {
                            PUSH (pair string int) (Pair "OpenVariant" 220); # pair string int : nat : @some : @storage
                            FAILWITH;   # FAILED
                          }; # @some : nat : @some : @storage
                        DUP 4;      # @storage : @some : nat : @some : @storage
                        GET 8;      # nat : @some : nat : @some : @storage
                        DIG 2;      # nat : nat : @some : @some : @storage
                        MUL;        # nat : @some : @some : @storage
                        EDIV;       # option (pair nat nat) : @some : @storage
                        IF_SOME
                          {
                            CAR;        # nat : @some : @storage
                          }
                          {
                            PUSH (pair string int) (Pair "DivisionByZero" 220); # pair string int : @some : @storage
                            FAILWITH;   # FAILED
                          }; # nat : @some : @storage
                      }
                      {
                        DIG 2;      # @parameter%deposit_callback : nat : @some : @storage
                        DROP;       # nat : @some : @storage
                      }; # nat : @some : @storage
                    # depositor = sp.local("depositor", self.data.savedState_depositor.open_some()) # nat : @some : @storage
                    DUP 3;      # @storage : nat : @some : @storage
                    CDR;        # pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : nat : @some : @storage
                    CAR;        # pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : nat : @some : @storage
                    CAR;        # pair (option %savedState_depositor address) (option %savedState_redeemer address) : nat : @some : @storage
                    CAR;        # option address : nat : @some : @storage
                    IF_SOME
                      {}
                      {
                        PUSH (pair string int) (Pair "OpenVariant" 223); # pair string int : nat : @some : @storage
                        FAILWITH;   # FAILED
                      }; # @some : nat : @some : @storage
                    # sp.transfer(sp.record(from_ = depositor.value, to_ = sp.self_address, value = tokensToDeposit.value), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.tokenAddress, entry_point='transfer').open_some()) # @some : nat : @some : @storage
                    NIL operation; # list operation : @some : nat : @some : @storage
                    DUP 5;      # @storage : list operation : @some : nat : @some : @storage
                    CDR;        # pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : list operation : @some : nat : @some : @storage
                    CDR;        # pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : list operation : @some : nat : @some : @storage
                    CAR;        # pair (int %state) (address %tokenAddress) : list operation : @some : nat : @some : @storage
                    CDR;        # address : list operation : @some : nat : @some : @storage
                    CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : @some : nat : @some : @storage
                    IF_SOME
                      {}
                      {
                        PUSH (pair string int) (Pair "OpenVariant" 229); # pair string int : list operation : @some : nat : @some : @storage
                        FAILWITH;   # FAILED
                      }; # @some : list operation : @some : nat : @some : @storage
                    PUSH mutez 0; # mutez : @some : list operation : @some : nat : @some : @storage
                    DIG 5;      # @some : mutez : @some : list operation : @some : nat : @storage
                    SELF_ADDRESS; # address : @some : mutez : @some : list operation : @some : nat : @storage
                    PAIR %to %value; # pair (address %to) (@some %value) : mutez : @some : list operation : @some : nat : @storage
                    DUP 5;      # @some : pair (address %to) (@some %value) : mutez : @some : list operation : @some : nat : @storage
                    PAIR %from; # pair (@some %from) (pair (address %to) (@some %value)) : mutez : @some : list operation : @some : nat : @storage
                    TRANSFER_TOKENS; # operation : list operation : @some : nat : @storage
                    CONS;       # list operation : @some : nat : @storage
                    # sp.transfer(sp.record(address = depositor.value, value = newTokens.value), sp.tez(0), sp.contract(sp.TRecord(address = sp.TAddress, value = sp.TNat).layout(("address", "value")), sp.self_address, entry_point='mint').open_some()) # list operation : @some : nat : @storage
                    SELF_ADDRESS; # address : list operation : @some : nat : @storage
                    CONTRACT %mint (pair (address %address) (nat %value)); # option (contract (pair (address %address) (nat %value))) : list operation : @some : nat : @storage
                    IF_SOME
                      {}
                      {
                        PUSH (pair string int) (Pair "OpenVariant" 241); # pair string int : list operation : @some : nat : @storage
                        FAILWITH;   # FAILED
                      }; # @some : list operation : @some : nat : @storage
                    PUSH mutez 0; # mutez : @some : list operation : @some : nat : @storage
                    DIG 4;      # nat : mutez : @some : list operation : @some : @storage
                    DIG 4;      # @some : nat : mutez : @some : list operation : @storage
                    PAIR %address %value; # pair (@some %address) (nat %value) : mutez : @some : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                    SWAP;       # @storage : list operation
                    # self.data.state = 0 # @storage : list operation
                    UNPAIR;     # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : list operation
                    SWAP;       # pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    UNPAIR;     # pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    SWAP;       # pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    UNPAIR;     # pair (int %state) (address %tokenAddress) : pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    CDR;        # address : pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    PUSH int 0; # int : address : pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    PAIR;       # pair int address : pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    PAIR;       # pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    SWAP;       # pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    # self.data.savedState_tokensToDeposit = sp.none # pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    UNPAIR;     # pair (option %savedState_depositor address) (option %savedState_redeemer address) : pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    SWAP;       # pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat) : pair (option %savedState_depositor address) (option %savedState_redeemer address) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    CDR;        # option nat : pair (option %savedState_depositor address) (option %savedState_redeemer address) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    NONE nat;   # option nat : option nat : pair (option %savedState_depositor address) (option %savedState_redeemer address) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    PAIR;       # pair (option nat) (option nat) : pair (option %savedState_depositor address) (option %savedState_redeemer address) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    SWAP;       # pair (option %savedState_depositor address) (option %savedState_redeemer address) : pair (option nat) (option nat) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    # self.data.savedState_depositor = sp.none # pair (option %savedState_depositor address) (option %savedState_redeemer address) : pair (option nat) (option nat) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    CDR;        # option address : pair (option nat) (option nat) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    NONE address; # option address : option address : pair (option nat) (option nat) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    PAIR;       # pair (option address) (option address) : pair (option nat) (option nat) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    PAIR;       # pair (pair (option address) (option address)) (pair (option nat) (option nat)) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    PAIR;       # pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    SWAP;       # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : list operation
                    PAIR;       # pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : list operation
                    SWAP;       # list operation : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                  }
                  {
                    SWAP;       # @storage : @parameter%getAllowance
                    # == getAllowance ==
                    # if ~ (self.data.balances.contains(sp.sender)): # @storage : @parameter%getAllowance
                    DUP;        # @storage : @storage : @parameter%getAllowance
                    DUG 2;      # @storage : @parameter%getAllowance : @storage
                    CAR;        # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%getAllowance : @storage
                    CAR;        # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : @parameter%getAllowance : @storage
                    CAR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%getAllowance : @storage
                    SENDER;     # address : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%getAllowance : @storage
                    MEM;        # bool : @parameter%getAllowance : @storage
                    IF
                      {}
                      {
                        SWAP;       # @storage : @parameter%getAllowance
                        # self.data.balances[sp.sender] = sp.record(approvals = {}, balance = 0) # @storage : @parameter%getAllowance
                        UNPAIR;     # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%getAllowance
                        UNPAIR;     # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%getAllowance
                        UNPAIR;     # big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%getAllowance
                        PUSH (option (pair (map %approvals address nat) (nat %balance))) (Some (Pair {} 0)); # option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%getAllowance
                        SENDER;     # address : option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%getAllowance
                        UPDATE;     # big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%getAllowance
                        PAIR;       # pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%getAllowance
                        PAIR;       # pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%getAllowance
                        PAIR;       # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%getAllowance
                        SWAP;       # @parameter%getAllowance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                      }; # @parameter%getAllowance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    SWAP;       # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%getAllowance
                    # sp.result(self.data.balances[sp.fst(params).owner].approvals.get(sp.fst(params).spender, default_value = 0)) # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%getAllowance
                    DUP;        # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%getAllowance
                    DUG 2;      # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%getAllowance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CAR;        # pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%getAllowance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CAR;        # pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : @parameter%getAllowance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CAR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%getAllowance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    SWAP;       # @parameter%getAllowance : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    DUP;        # @parameter%getAllowance : @parameter%getAllowance : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    DUG 2;      # @parameter%getAllowance : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%getAllowance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CAR;        # pair (address %owner) (address %spender) : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%getAllowance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%getAllowance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    GET;        # option (pair (map %approvals address nat) (nat %balance)) : @parameter%getAllowance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    IF_SOME
                      {
                        # of_some: Get-item:75 # @some : @parameter%getAllowance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                      }
                      {
                        PUSH (pair string int) (Pair "GetItem" 75); # pair string int : @parameter%getAllowance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        FAILWITH;   # FAILED
                      }; # @some : @parameter%getAllowance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CAR;        # map address nat : @parameter%getAllowance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    SWAP;       # @parameter%getAllowance : map address nat : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    DUP;        # @parameter%getAllowance : @parameter%getAllowance : map address nat : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    DUG 2;      # @parameter%getAllowance : map address nat : @parameter%getAllowance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CAR;        # pair (address %owner) (address %spender) : map address nat : @parameter%getAllowance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CDR;        # address : map address nat : @parameter%getAllowance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    GET;        # option nat : @parameter%getAllowance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    IF_SOME
                      {
                        # of_some: Get-item:75 # @some : @parameter%getAllowance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                      }
                      {
                        PUSH nat 0; # nat : @parameter%getAllowance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                      }; # nat : @parameter%getAllowance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    # sp.transfer(__s218.value, sp.tez(0), sp.snd(params)) # nat : @parameter%getAllowance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    NIL operation; # list operation : nat : @parameter%getAllowance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    DIG 2;      # @parameter%getAllowance : list operation : nat : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CDR;        # contract nat : list operation : nat : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    PUSH mutez 0; # mutez : contract nat : list operation : nat : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    DIG 3;      # nat : mutez : contract nat : list operation : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CONS;       # list operation : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                  }; # list operation : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
              }
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%getBalance
                    # == getBalance ==
                    # if ~ (self.data.balances.contains(sp.fst(params))): # @storage : @parameter%getBalance
                    DUP;        # @storage : @storage : @parameter%getBalance
                    DUG 2;      # @storage : @parameter%getBalance : @storage
                    CAR;        # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%getBalance : @storage
                    CAR;        # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : @parameter%getBalance : @storage
                    CAR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%getBalance : @storage
                    SWAP;       # @parameter%getBalance : big_map address (pair (map %approvals address nat) (nat %balance)) : @storage
                    DUP;        # @parameter%getBalance : @parameter%getBalance : big_map address (pair (map %approvals address nat) (nat %balance)) : @storage
                    DUG 2;      # @parameter%getBalance : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%getBalance : @storage
                    CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%getBalance : @storage
                    MEM;        # bool : @parameter%getBalance : @storage
                    IF
                      {}
                      {
                        SWAP;       # @storage : @parameter%getBalance
                        # self.data.balances[sp.fst(params)] = sp.record(approvals = {}, balance = 0) # @storage : @parameter%getBalance
                        UNPAIR;     # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%getBalance
                        UNPAIR;     # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%getBalance
                        UNPAIR;     # big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%getBalance
                        PUSH (option (pair (map %approvals address nat) (nat %balance))) (Some (Pair {} 0)); # option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%getBalance
                        DUP 6;      # @parameter%getBalance : option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%getBalance
                        CAR;        # address : option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%getBalance
                        UPDATE;     # big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%getBalance
                        PAIR;       # pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%getBalance
                        PAIR;       # pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%getBalance
                        PAIR;       # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%getBalance
                        SWAP;       # @parameter%getBalance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                      }; # @parameter%getBalance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    SWAP;       # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%getBalance
                    # sp.result(self.data.balances[sp.fst(params)].balance) # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%getBalance
                    DUP;        # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%getBalance
                    DUG 2;      # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%getBalance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CAR;        # pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%getBalance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CAR;        # pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : @parameter%getBalance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CAR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%getBalance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    SWAP;       # @parameter%getBalance : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    DUP;        # @parameter%getBalance : @parameter%getBalance : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    DUG 2;      # @parameter%getBalance : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%getBalance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%getBalance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    GET;        # option (pair (map %approvals address nat) (nat %balance)) : @parameter%getBalance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    IF_SOME
                      {
                        # of_some: Get-item:66 # @some : @parameter%getBalance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                      }
                      {
                        PUSH (pair string int) (Pair "GetItem" 66); # pair string int : @parameter%getBalance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        FAILWITH;   # FAILED
                      }; # @some : @parameter%getBalance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CDR;        # nat : @parameter%getBalance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    # sp.transfer(__s219.value, sp.tez(0), sp.snd(params)) # nat : @parameter%getBalance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    NIL operation; # list operation : nat : @parameter%getBalance : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    DIG 2;      # @parameter%getBalance : list operation : nat : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CDR;        # contract nat : list operation : nat : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    PUSH mutez 0; # mutez : contract nat : list operation : nat : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    DIG 3;      # nat : mutez : contract nat : list operation : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CONS;       # list operation : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                  }
                  {
                    IF_LEFT
                      {
                        SWAP;       # @storage : @parameter%getTotalSupply
                        # == getTotalSupply ==
                        # sp.result(self.data.totalSupply) # @storage : @parameter%getTotalSupply
                        DUP;        # @storage : @storage : @parameter%getTotalSupply
                        DUG 2;      # @storage : @parameter%getTotalSupply : @storage
                        GET 8;      # nat : @parameter%getTotalSupply : @storage
                        # sp.transfer(__s220.value, sp.tez(0), sp.snd(params)) # nat : @parameter%getTotalSupply : @storage
                        NIL operation; # list operation : nat : @parameter%getTotalSupply : @storage
                        DIG 2;      # @parameter%getTotalSupply : list operation : nat : @storage
                        CDR;        # contract nat : list operation : nat : @storage
                        PUSH mutez 0; # mutez : contract nat : list operation : nat : @storage
                        DIG 3;      # nat : mutez : contract nat : list operation : @storage
                        TRANSFER_TOKENS; # operation : list operation : @storage
                        CONS;       # list operation : @storage
                      }
                      {
                        # == liquidate ==
                        # sp.transfer(params, sp.tez(0), sp.contract(sp.TAddress, self.data.ovenRegistryAddress, entry_point='isOven').open_some()) # @parameter%liquidate : @storage
                        NIL operation; # list operation : @parameter%liquidate : @storage
                        DUP 3;      # @storage : list operation : @parameter%liquidate : @storage
                        CAR;        # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation : @parameter%liquidate : @storage
                        CDR;        # pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : list operation : @parameter%liquidate : @storage
                        CAR;        # pair (address %ovenRegistryAddress) (address %quipuswapAddress) : list operation : @parameter%liquidate : @storage
                        CAR;        # address : list operation : @parameter%liquidate : @storage
                        CONTRACT %isOven address; # option (contract address) : list operation : @parameter%liquidate : @storage
                        IF_SOME
                          {}
                          {
                            PUSH (pair string int) (Pair "OpenVariant" 162); # pair string int : list operation : @parameter%liquidate : @storage
                            FAILWITH;   # FAILED
                          }; # @some : list operation : @parameter%liquidate : @storage
                        PUSH mutez 0; # mutez : @some : list operation : @parameter%liquidate : @storage
                        DUP 4;      # @parameter%liquidate : mutez : @some : list operation : @parameter%liquidate : @storage
                        TRANSFER_TOKENS; # operation : list operation : @parameter%liquidate : @storage
                        CONS;       # list operation : @parameter%liquidate : @storage
                        SWAP;       # @parameter%liquidate : list operation : @storage
                        # sp.send(params, sp.tez(0)) # @parameter%liquidate : list operation : @storage
                        CONTRACT %liquidate unit; # option (contract unit) : list operation : @storage
                        IF_SOME
                          {}
                          {
                            PUSH (pair string int) (Pair "OpenVariant" 170); # pair string int : list operation : @storage
                            FAILWITH;   # FAILED
                          }; # @some : list operation : @storage
                        PUSH mutez 0; # mutez : @some : list operation : @storage
                        UNIT;       # unit : mutez : @some : list operation : @storage
                        TRANSFER_TOKENS; # operation : list operation : @storage
                        CONS;       # list operation : @storage
                      }; # list operation : @storage
                  }; # list operation : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
              }; # list operation : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
          }; # list operation : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map nat (pair nat (map string bytes))) nat)))
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    # == mint ==
                    # sp.verify(False | (sp.sender == sp.self_address), message = 'NOT_ALLOWED') # @parameter%mint : @storage
                    SELF_ADDRESS; # address : @parameter%mint : @storage
                    SENDER;     # address : address : @parameter%mint : @storage
                    COMPARE;    # int : @parameter%mint : @storage
                    EQ;         # bool : @parameter%mint : @storage
                    IF
                      {}
                      {
                        PUSH (pair string int) (Pair "verify" 87); # pair string int : @parameter%mint : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%mint : @storage
                    SWAP;       # @storage : @parameter%mint
                    # if ~ (self.data.balances.contains(params.address)): # @storage : @parameter%mint
                    DUP;        # @storage : @storage : @parameter%mint
                    DUG 2;      # @storage : @parameter%mint : @storage
                    CAR;        # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%mint : @storage
                    CAR;        # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : @parameter%mint : @storage
                    CAR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%mint : @storage
                    SWAP;       # @parameter%mint : big_map address (pair (map %approvals address nat) (nat %balance)) : @storage
                    DUP;        # @parameter%mint : @parameter%mint : big_map address (pair (map %approvals address nat) (nat %balance)) : @storage
                    DUG 2;      # @parameter%mint : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%mint : @storage
                    CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%mint : @storage
                    MEM;        # bool : @parameter%mint : @storage
                    IF
                      {}
                      {
                        SWAP;       # @storage : @parameter%mint
                        # self.data.balances[params.address] = sp.record(approvals = {}, balance = 0) # @storage : @parameter%mint
                        UNPAIR;     # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%mint
                        UNPAIR;     # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%mint
                        UNPAIR;     # big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%mint
                        PUSH (option (pair (map %approvals address nat) (nat %balance))) (Some (Pair {} 0)); # option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%mint
                        DUP 6;      # @parameter%mint : option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%mint
                        CAR;        # address : option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%mint
                        UPDATE;     # big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%mint
                        PAIR;       # pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%mint
                        PAIR;       # pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%mint
                        PAIR;       # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%mint
                        SWAP;       # @parameter%mint : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                      }; # @parameter%mint : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    SWAP;       # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%mint
                    # self.data.balances[params.address].balance += params.value # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%mint
                    UNPAIR;     # pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%mint
                    UNPAIR;     # pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%mint
                    UNPAIR;     # big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%mint
                    DUP;        # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%mint
                    DUP 6;      # @parameter%mint : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%mint
                    CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%mint
                    DUP;        # address : address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%mint
                    DUG 2;      # address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%mint
                    GET;        # option (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%mint
                    IF_SOME
                      {}
                      {
                        PUSH (pair string int) (Pair "unzip_option" 90); # pair string int : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%mint
                        FAILWITH;   # FAILED
                      }; # @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%mint
                    UNPAIR;     # map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%mint
                    SWAP;       # nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%mint
                    DUP 8;      # @parameter%mint : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%mint
                    CDR;        # nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%mint
                    ADD;        # nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%mint
                    SWAP;       # map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%mint
                    PAIR;       # pair (map address nat) nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%mint
                    SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%mint
                    SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%mint
                    UPDATE;     # big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%mint
                    PAIR;       # pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%mint
                    PAIR;       # pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%mint
                    SWAP;       # pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%mint
                    # self.data.totalSupply += params.value # pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%mint
                    UNPAIR;     # pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%mint
                    SWAP;       # pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%mint
                    UNPAIR;     # pair (int %state) (address %tokenAddress) : pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%mint
                    SWAP;       # pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply) : pair (int %state) (address %tokenAddress) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%mint
                    UNPAIR;     # big_map nat (pair nat (map string bytes)) : nat : pair (int %state) (address %tokenAddress) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%mint
                    SWAP;       # nat : big_map nat (pair nat (map string bytes)) : pair (int %state) (address %tokenAddress) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%mint
                    DIG 5;      # @parameter%mint : nat : big_map nat (pair nat (map string bytes)) : pair (int %state) (address %tokenAddress) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    CDR;        # nat : nat : big_map nat (pair nat (map string bytes)) : pair (int %state) (address %tokenAddress) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    ADD;        # nat : big_map nat (pair nat (map string bytes)) : pair (int %state) (address %tokenAddress) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    SWAP;       # big_map nat (pair nat (map string bytes)) : nat : pair (int %state) (address %tokenAddress) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    PAIR;       # pair (big_map nat (pair nat (map string bytes))) nat : pair (int %state) (address %tokenAddress) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    SWAP;       # pair (int %state) (address %tokenAddress) : pair (big_map nat (pair nat (map string bytes))) nat : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    PAIR;       # pair (pair (int %state) (address %tokenAddress)) (pair (big_map nat (pair nat (map string bytes))) nat) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    SWAP;       # pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (int %state) (address %tokenAddress)) (pair (big_map nat (pair nat (map string bytes))) nat) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    PAIR;       # pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    SWAP;       # pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map nat (pair nat (map string bytes))) nat))
                    PAIR;       # pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map nat (pair nat (map string bytes))) nat)))
                    NIL operation; # list operation : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map nat (pair nat (map string bytes))) nat)))
                  }
                  {
                    # == redeem ==
                    # sp.verify(self.data.state == 0, message = 'bad state') # @parameter%redeem : @storage
                    PUSH int 0; # int : @parameter%redeem : @storage
                    DUP 3;      # @storage : int : @parameter%redeem : @storage
                    CDR;        # pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : int : @parameter%redeem : @storage
                    CDR;        # pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : int : @parameter%redeem : @storage
                    CAR;        # pair (int %state) (address %tokenAddress) : int : @parameter%redeem : @storage
                    CAR;        # int : int : @parameter%redeem : @storage
                    COMPARE;    # int : @parameter%redeem : @storage
                    EQ;         # bool : @parameter%redeem : @storage
                    IF
                      {}
                      {
                        PUSH (pair string int) (Pair "verify" 259); # pair string int : @parameter%redeem : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%redeem : @storage
                    SWAP;       # @storage : @parameter%redeem
                    # self.data.state = 2 # @storage : @parameter%redeem
                    UNPAIR;     # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%redeem
                    SWAP;       # pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%redeem
                    UNPAIR;     # pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%redeem
                    SWAP;       # pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%redeem
                    UNPAIR;     # pair (int %state) (address %tokenAddress) : pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%redeem
                    CDR;        # address : pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%redeem
                    PUSH int 2; # int : address : pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%redeem
                    PAIR;       # pair int address : pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%redeem
                    PAIR;       # pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%redeem
                    SWAP;       # pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%redeem
                    # self.data.savedState_tokensToRedeem = sp.some(params) # pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%redeem
                    UNPAIR;     # pair (option %savedState_depositor address) (option %savedState_redeemer address) : pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%redeem
                    SWAP;       # pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat) : pair (option %savedState_depositor address) (option %savedState_redeemer address) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%redeem
                    CAR;        # option nat : pair (option %savedState_depositor address) (option %savedState_redeemer address) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%redeem
                    DIG 4;      # @parameter%redeem : option nat : pair (option %savedState_depositor address) (option %savedState_redeemer address) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    SOME;       # option nat : option nat : pair (option %savedState_depositor address) (option %savedState_redeemer address) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    SWAP;       # option nat : option nat : pair (option %savedState_depositor address) (option %savedState_redeemer address) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    PAIR;       # pair (option nat) (option nat) : pair (option %savedState_depositor address) (option %savedState_redeemer address) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    SWAP;       # pair (option %savedState_depositor address) (option %savedState_redeemer address) : pair (option nat) (option nat) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    # self.data.savedState_redeemer = sp.some(sp.sender) # pair (option %savedState_depositor address) (option %savedState_redeemer address) : pair (option nat) (option nat) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    CAR;        # option address : pair (option nat) (option nat) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    SENDER;     # address : option address : pair (option nat) (option nat) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    SOME;       # option address : option address : pair (option nat) (option nat) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    SWAP;       # option address : option address : pair (option nat) (option nat) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    PAIR;       # pair (option address) (option address) : pair (option nat) (option nat) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    PAIR;       # pair (pair (option address) (option address)) (pair (option nat) (option nat)) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    PAIR;       # pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                    SWAP;       # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                    PAIR;       # pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    # sp.transfer((sp.self_address, sp.self_entry_point('redeem_callback')), sp.tez(0), sp.contract(sp.TPair(sp.TAddress, sp.TContract(sp.TNat)), self.data.tokenAddress, entry_point='getBalance').open_some()) # pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    DUP;        # pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CDR;        # pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CDR;        # pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CAR;        # pair int address : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CDR;        # address : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CONTRACT %getBalance (pair address (contract nat)); # option (contract (pair address (contract nat))) : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    IF_SOME
                      {}
                      {
                        PUSH (pair string int) (Pair "OpenVariant" 268); # pair string int : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        FAILWITH;   # FAILED
                      }; # @some : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    NIL operation; # list operation : @some : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    SWAP;       # @some : list operation : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    PUSH mutez 0; # mutez : @some : list operation : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    SELF %redeem_callback; # contract nat : mutez : @some : list operation : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    SELF_ADDRESS; # address : contract nat : mutez : @some : list operation : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    PAIR;       # pair address (contract nat) : mutez : @some : list operation : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    CONS;       # list operation : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                  }; # list operation : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map nat (pair nat (map string bytes))) nat)))
              }
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%redeem_callback
                    # == redeem_callback ==
                    # sp.verify(sp.sender == self.data.tokenAddress, message = 'bad sender') # @storage : @parameter%redeem_callback
                    DUP;        # @storage : @storage : @parameter%redeem_callback
                    DUG 2;      # @storage : @parameter%redeem_callback : @storage
                    CDR;        # pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%redeem_callback : @storage
                    CDR;        # pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : @parameter%redeem_callback : @storage
                    CAR;        # pair (int %state) (address %tokenAddress) : @parameter%redeem_callback : @storage
                    CDR;        # address : @parameter%redeem_callback : @storage
                    SENDER;     # address : address : @parameter%redeem_callback : @storage
                    COMPARE;    # int : @parameter%redeem_callback : @storage
                    EQ;         # bool : @parameter%redeem_callback : @storage
                    IF
                      {}
                      {
                        PUSH (pair string int) (Pair "verify" 281); # pair string int : @parameter%redeem_callback : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%redeem_callback : @storage
                    # sp.verify(self.data.state == 2, message = 'bad state') # @parameter%redeem_callback : @storage
                    PUSH int 2; # int : @parameter%redeem_callback : @storage
                    DUP 3;      # @storage : int : @parameter%redeem_callback : @storage
                    CDR;        # pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : int : @parameter%redeem_callback : @storage
                    CDR;        # pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : int : @parameter%redeem_callback : @storage
                    CAR;        # pair (int %state) (address %tokenAddress) : int : @parameter%redeem_callback : @storage
                    CAR;        # int : int : @parameter%redeem_callback : @storage
                    COMPARE;    # int : @parameter%redeem_callback : @storage
                    EQ;         # bool : @parameter%redeem_callback : @storage
                    IF
                      {}
                      {
                        PUSH (pair string int) (Pair "verify" 284); # pair string int : @parameter%redeem_callback : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%redeem_callback : @storage
                    SWAP;       # @storage : @parameter%redeem_callback
                    # tokensToRedeem = sp.local("tokensToRedeem", self.data.savedState_tokensToRedeem.open_some()) # @storage : @parameter%redeem_callback
                    DUP;        # @storage : @storage : @parameter%redeem_callback
                    DUG 2;      # @storage : @parameter%redeem_callback : @storage
                    CDR;        # pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%redeem_callback : @storage
                    CAR;        # pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : @parameter%redeem_callback : @storage
                    CDR;        # pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat) : @parameter%redeem_callback : @storage
                    CDR;        # option nat : @parameter%redeem_callback : @storage
                    IF_SOME
                      {}
                      {
                        PUSH (pair string int) (Pair "OpenVariant" 287); # pair string int : @parameter%redeem_callback : @storage
                        FAILWITH;   # FAILED
                      }; # @some : @parameter%redeem_callback : @storage
                    # fractionOfPoolOwnership = sp.local("fractionOfPoolOwnership", (tokensToRedeem.value * 1000000000000000000) // self.data.totalSupply) # @some : @parameter%redeem_callback : @storage
                    DUP 3;      # @storage : @some : @parameter%redeem_callback : @storage
                    GET 8;      # nat : @some : @parameter%redeem_callback : @storage
                    PUSH nat 1000000000000000000; # nat : nat : @some : @parameter%redeem_callback : @storage
                    DUP 3;      # @some : nat : nat : @some : @parameter%redeem_callback : @storage
                    MUL;        # nat : nat : @some : @parameter%redeem_callback : @storage
                    EDIV;       # option (pair nat nat) : @some : @parameter%redeem_callback : @storage
                    IF_SOME
                      {
                        CAR;        # nat : @some : @parameter%redeem_callback : @storage
                      }
                      {
                        PUSH (pair string int) (Pair "DivisionByZero" 288); # pair string int : @some : @parameter%redeem_callback : @storage
                        FAILWITH;   # FAILED
                      }; # nat : @some : @parameter%redeem_callback : @storage
                    # tokensToReceive = sp.local("tokensToReceive", (fractionOfPoolOwnership.value * params) // 1000000000000000000) # nat : @some : @parameter%redeem_callback : @storage
                    PUSH nat 1000000000000000000; # nat : nat : @some : @parameter%redeem_callback : @storage
                    DIG 3;      # @parameter%redeem_callback : nat : nat : @some : @storage
                    DIG 2;      # nat : @parameter%redeem_callback : nat : @some : @storage
                    MUL;        # nat : nat : @some : @storage
                    EDIV;       # option (pair nat nat) : @some : @storage
                    IF_SOME
                      {
                        CAR;        # nat : @some : @storage
                      }
                      {
                        PUSH (pair string int) (Pair "DivisionByZero" 289); # pair string int : @some : @storage
                        FAILWITH;   # FAILED
                      }; # nat : @some : @storage
                    # redeemer = sp.local("redeemer", self.data.savedState_redeemer.open_some()) # nat : @some : @storage
                    DUP 3;      # @storage : nat : @some : @storage
                    CDR;        # pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : nat : @some : @storage
                    CAR;        # pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : nat : @some : @storage
                    CAR;        # pair (option %savedState_depositor address) (option %savedState_redeemer address) : nat : @some : @storage
                    CDR;        # option address : nat : @some : @storage
                    IF_SOME
                      {}
                      {
                        PUSH (pair string int) (Pair "OpenVariant" 292); # pair string int : nat : @some : @storage
                        FAILWITH;   # FAILED
                      }; # @some : nat : @some : @storage
                    # sp.transfer(sp.record(address = redeemer.value, value = tokensToRedeem.value), sp.tez(0), sp.contract(sp.TRecord(address = sp.TAddress, value = sp.TNat).layout(("address", "value")), sp.self_address, entry_point='burn').open_some()) # @some : nat : @some : @storage
                    NIL operation; # list operation : @some : nat : @some : @storage
                    SELF_ADDRESS; # address : list operation : @some : nat : @some : @storage
                    CONTRACT %burn (pair (address %address) (nat %value)); # option (contract (pair (address %address) (nat %value))) : list operation : @some : nat : @some : @storage
                    IF_SOME
                      {}
                      {
                        PUSH (pair string int) (Pair "OpenVariant" 297); # pair string int : list operation : @some : nat : @some : @storage
                        FAILWITH;   # FAILED
                      }; # @some : list operation : @some : nat : @some : @storage
                    PUSH mutez 0; # mutez : @some : list operation : @some : nat : @some : @storage
                    DIG 5;      # @some : mutez : @some : list operation : @some : nat : @storage
                    DUP 5;      # @some : @some : mutez : @some : list operation : @some : nat : @storage
                    PAIR %address %value; # pair (@some %address) (@some %value) : mutez : @some : list operation : @some : nat : @storage
                    TRANSFER_TOKENS; # operation : list operation : @some : nat : @storage
                    CONS;       # list operation : @some : nat : @storage
                    # sp.transfer(sp.record(from_ = sp.self_address, to_ = redeemer.value, value = tokensToReceive.value), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.tokenAddress, entry_point='transfer').open_some()) # list operation : @some : nat : @storage
                    DUP 4;      # @storage : list operation : @some : nat : @storage
                    CDR;        # pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : list operation : @some : nat : @storage
                    CDR;        # pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : list operation : @some : nat : @storage
                    CAR;        # pair (int %state) (address %tokenAddress) : list operation : @some : nat : @storage
                    CDR;        # address : list operation : @some : nat : @storage
                    CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : @some : nat : @storage
                    IF_SOME
                      {}
                      {
                        PUSH (pair string int) (Pair "OpenVariant" 310); # pair string int : list operation : @some : nat : @storage
                        FAILWITH;   # FAILED
                      }; # @some : list operation : @some : nat : @storage
                    PUSH mutez 0; # mutez : @some : list operation : @some : nat : @storage
                    DIG 4;      # nat : mutez : @some : list operation : @some : @storage
                    DIG 4;      # @some : nat : mutez : @some : list operation : @storage
                    PAIR %to %value; # pair (@some %to) (nat %value) : mutez : @some : list operation : @storage
                    SELF_ADDRESS; # address : pair (@some %to) (nat %value) : mutez : @some : list operation : @storage
                    PAIR %from; # pair (address %from) (pair (@some %to) (nat %value)) : mutez : @some : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                    SWAP;       # @storage : list operation
                    # self.data.state = 0 # @storage : list operation
                    UNPAIR;     # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : list operation
                    SWAP;       # pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    UNPAIR;     # pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    SWAP;       # pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    UNPAIR;     # pair (int %state) (address %tokenAddress) : pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    CDR;        # address : pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    PUSH int 0; # int : address : pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    PAIR;       # pair int address : pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    PAIR;       # pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    SWAP;       # pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    # self.data.savedState_tokensToRedeem = sp.none # pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    UNPAIR;     # pair (option %savedState_depositor address) (option %savedState_redeemer address) : pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    SWAP;       # pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat) : pair (option %savedState_depositor address) (option %savedState_redeemer address) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    CAR;        # option nat : pair (option %savedState_depositor address) (option %savedState_redeemer address) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    NONE nat;   # option nat : option nat : pair (option %savedState_depositor address) (option %savedState_redeemer address) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    SWAP;       # option nat : option nat : pair (option %savedState_depositor address) (option %savedState_redeemer address) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    PAIR;       # pair (option nat) (option nat) : pair (option %savedState_depositor address) (option %savedState_redeemer address) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    SWAP;       # pair (option %savedState_depositor address) (option %savedState_redeemer address) : pair (option nat) (option nat) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    # self.data.savedState_redeemer = sp.none # pair (option %savedState_depositor address) (option %savedState_redeemer address) : pair (option nat) (option nat) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    CAR;        # option address : pair (option nat) (option nat) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    NONE address; # option address : option address : pair (option nat) (option nat) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    SWAP;       # option address : option address : pair (option nat) (option nat) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    PAIR;       # pair (option address) (option address) : pair (option nat) (option nat) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    PAIR;       # pair (pair (option address) (option address)) (pair (option nat) (option nat)) : pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    PAIR;       # pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : list operation
                    SWAP;       # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : list operation
                    PAIR;       # pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : list operation
                    SWAP;       # list operation : pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                  }
                  {
                    IF_LEFT
                      {
                        # == transfer ==
                        # sp.verify(False | ((~ False) & ((params.from_ == sp.sender) | (self.data.balances[params.from_].approvals[sp.sender] >= params.value))), message = 'NOT_ALLOWED') # @parameter%transfer : @storage
                        DUP;        # @parameter%transfer : @parameter%transfer : @storage
                        CAR;        # address : @parameter%transfer : @storage
                        SENDER;     # address : address : @parameter%transfer : @storage
                        COMPARE;    # int : @parameter%transfer : @storage
                        EQ;         # bool : @parameter%transfer : @storage
                        IF
                          {
                            PUSH bool True; # bool : @parameter%transfer : @storage
                          }
                          {
                            DUP;        # @parameter%transfer : @parameter%transfer : @storage
                            GET 4;      # nat : @parameter%transfer : @storage
                            DUP 3;      # @storage : nat : @parameter%transfer : @storage
                            CAR;        # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : nat : @parameter%transfer : @storage
                            CAR;        # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : nat : @parameter%transfer : @storage
                            CAR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : @storage
                            DUP 3;      # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : @storage
                            CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : @storage
                            GET;        # option (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : @storage
                            IF_SOME
                              {
                                # of_some: Get-item:31 # @some : nat : @parameter%transfer : @storage
                              }
                              {
                                PUSH (pair string int) (Pair "GetItem" 31); # pair string int : nat : @parameter%transfer : @storage
                                FAILWITH;   # FAILED
                              }; # @some : nat : @parameter%transfer : @storage
                            CAR;        # map address nat : nat : @parameter%transfer : @storage
                            SENDER;     # address : map address nat : nat : @parameter%transfer : @storage
                            GET;        # option nat : nat : @parameter%transfer : @storage
                            IF_SOME
                              {
                                # of_some: Get-item:31 # @some : nat : @parameter%transfer : @storage
                              }
                              {
                                PUSH (pair string int) (Pair "GetItem" 31); # pair string int : nat : @parameter%transfer : @storage
                                FAILWITH;   # FAILED
                              }; # @some : nat : @parameter%transfer : @storage
                            COMPARE;    # int : @parameter%transfer : @storage
                            GE;         # bool : @parameter%transfer : @storage
                          }; # bool : @parameter%transfer : @storage
                        IF
                          {}
                          {
                            PUSH (pair string int) (Pair "verify" 28); # pair string int : @parameter%transfer : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%transfer : @storage
                        SWAP;       # @storage : @parameter%transfer
                        # if ~ (self.data.balances.contains(params.from_)): # @storage : @parameter%transfer
                        DUP;        # @storage : @storage : @parameter%transfer
                        DUG 2;      # @storage : @parameter%transfer : @storage
                        CAR;        # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%transfer : @storage
                        CAR;        # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : @parameter%transfer : @storage
                        CAR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%transfer : @storage
                        SWAP;       # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : @storage
                        DUP;        # @parameter%transfer : @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : @storage
                        DUG 2;      # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%transfer : @storage
                        CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%transfer : @storage
                        MEM;        # bool : @parameter%transfer : @storage
                        IF
                          {}
                          {
                            SWAP;       # @storage : @parameter%transfer
                            # self.data.balances[params.from_] = sp.record(approvals = {}, balance = 0) # @storage : @parameter%transfer
                            UNPAIR;     # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                            UNPAIR;     # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                            UNPAIR;     # big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                            PUSH (option (pair (map %approvals address nat) (nat %balance))) (Some (Pair {} 0)); # option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                            DUP 6;      # @parameter%transfer : option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                            CAR;        # address : option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                            UPDATE;     # big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                            PAIR;       # pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                            PAIR;       # pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                            PAIR;       # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%transfer
                            SWAP;       # @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                          }; # @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        SWAP;       # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%transfer
                        # if ~ (self.data.balances.contains(params.to_)): # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%transfer
                        DUP;        # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%transfer
                        DUG 2;      # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        CAR;        # pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        CAR;        # pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        CAR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        SWAP;       # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        DUP;        # @parameter%transfer : @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        DUG 2;      # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        GET 3;      # address : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        MEM;        # bool : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        IF
                          {}
                          {
                            SWAP;       # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%transfer
                            # self.data.balances[params.to_] = sp.record(approvals = {}, balance = 0) # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%transfer
                            UNPAIR;     # pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                            UNPAIR;     # pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                            UNPAIR;     # big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                            PUSH (option (pair (map %approvals address nat) (nat %balance))) (Some (Pair {} 0)); # option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                            DUP 6;      # @parameter%transfer : option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                            GET 3;      # address : option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                            UPDATE;     # big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                            PAIR;       # pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                            PAIR;       # pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                            PAIR;       # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%transfer
                            SWAP;       # @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                          }; # @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        # sp.verify(self.data.balances[params.from_].balance >= params.value, message = 'LOW_BALANCE') # @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        DUP;        # @parameter%transfer : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        GET 4;      # nat : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        DUP 3;      # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : nat : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        CAR;        # pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : nat : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        CAR;        # pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : nat : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        CAR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        DUP 3;      # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        GET;        # option (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        IF_SOME
                          {
                            # of_some: Get-item:37 # @some : nat : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                          }
                          {
                            PUSH (pair string int) (Pair "GetItem" 37); # pair string int : nat : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                            FAILWITH;   # FAILED
                          }; # @some : nat : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        CDR;        # nat : nat : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        COMPARE;    # int : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        GE;         # bool : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        IF
                          {}
                          {
                            PUSH (pair string int) (Pair "verify" 37); # pair string int : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                            FAILWITH;   # FAILED
                          }; # @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        SWAP;       # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%transfer
                        # self.data.balances[params.from_].balance = sp.as_nat(self.data.balances[params.from_].balance - params.value) # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%transfer
                        DUP;        # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%transfer
                        DUG 2;      # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        UNPAIR;     # pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        UNPAIR;     # pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        UNPAIR;     # big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        DUP;        # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        DUP 6;      # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        DUP;        # address : address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        DUG 2;      # address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        GET;        # option (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        IF_SOME
                          {}
                          {
                            PUSH (pair string int) (Pair "unzip_option" 38); # pair string int : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                            FAILWITH;   # FAILED
                          }; # @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        CAR;        # map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        DUP 7;      # @parameter%transfer : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        GET 4;      # nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        DIG 8;      # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        CAR;        # pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        CAR;        # pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        CAR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        DUP 9;      # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        GET;        # option (pair (map %approvals address nat) (nat %balance)) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        IF_SOME
                          {
                            # of_some: Get-item:38 # @some : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                          }
                          {
                            PUSH (pair string int) (Pair "GetItem" 38); # pair string int : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                            FAILWITH;   # FAILED
                          }; # @some : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        CDR;        # nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        SUB;        # int : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        ISNAT;      # option nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        IF_SOME
                          {}
                          {
                            PUSH (pair string int) (Pair "OpenVariant" 38); # pair string int : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                            FAILWITH;   # FAILED
                          }; # @some : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        SWAP;       # map address nat : @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        PAIR;       # pair (map address nat) @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        SOME;       # option (pair (map address nat) @some) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        SWAP;       # address : option (pair (map address nat) @some) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        UPDATE;     # big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        # self.data.balances[params.to_].balance += params.value # big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        DUP;        # big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        DUP 6;      # @parameter%transfer : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        GET 3;      # address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        DUP;        # address : address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        DUG 2;      # address : big_map address (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        GET;        # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        IF_SOME
                          {}
                          {
                            PUSH (pair string int) (Pair "unzip_option" 39); # pair string int : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                            FAILWITH;   # FAILED
                          }; # @some : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        UNPAIR;     # map address nat : nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        SWAP;       # nat : map address nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        DUP 8;      # @parameter%transfer : nat : map address nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        GET 4;      # nat : nat : map address nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        ADD;        # nat : map address nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        SWAP;       # map address nat : nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        PAIR;       # pair (map address nat) nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        UPDATE;     # big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        PAIR;       # pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        PAIR;       # pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                        PAIR;       # pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%transfer
                        SWAP;       # @parameter%transfer : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        # if (params.from_ != sp.sender) & (~ False): # @parameter%transfer : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        DUP;        # @parameter%transfer : @parameter%transfer : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        CAR;        # address : @parameter%transfer : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        SENDER;     # address : address : @parameter%transfer : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        COMPARE;    # int : @parameter%transfer : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        NEQ;        # bool : @parameter%transfer : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                        IF
                          {
                            SWAP;       # pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%transfer
                            # self.data.balances[params.from_].approvals[sp.sender] = sp.as_nat(self.data.balances[params.from_].approvals[sp.sender] - params.value) # pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%transfer
                            DUP;        # pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%transfer
                            DUG 2;      # pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : @parameter%transfer : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                            UNPAIR;     # pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                            UNPAIR;     # pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                            UNPAIR;     # big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                            DUP;        # big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                            DUP 6;      # @parameter%transfer : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                            CAR;        # address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                            DUP;        # address : address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                            DUG 2;      # address : big_map address (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                            GET;        # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                            IF_SOME
                              {}
                              {
                                PUSH (pair string int) (Pair "unzip_option" 41); # pair string int : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                                FAILWITH;   # FAILED
                              }; # @some : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                            UNPAIR;     # map address nat : nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                            DUP 8;      # @parameter%transfer : map address nat : nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                            GET 4;      # nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                            DIG 9;      # pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))) : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                            CAR;        # pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                            CAR;        # pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes)) : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                            CAR;        # big_map address (pair (map address nat) nat) : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%transfer
                            DIG 9;      # @parameter%transfer : big_map address (pair (map address nat) nat) : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                            CAR;        # address : big_map address (pair (map address nat) nat) : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                            GET;        # option (pair (map address nat) nat) : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                            IF_SOME
                              {
                                # of_some: Get-item:41 # @some : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                              }
                              {
                                PUSH (pair string int) (Pair "GetItem" 41); # pair string int : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                                FAILWITH;   # FAILED
                              }; # @some : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                            CAR;        # map address nat : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                            SENDER;     # address : map address nat : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                            GET;        # option nat : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                            IF_SOME
                              {
                                # of_some: Get-item:41 # @some : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                              }
                              {
                                PUSH (pair string int) (Pair "GetItem" 41); # pair string int : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                                FAILWITH;   # FAILED
                              }; # @some : nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                            SUB;        # int : map address nat : nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                            ISNAT;      # option nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                            IF_SOME
                              {}
                              {
                                PUSH (pair string int) (Pair "OpenVariant" 41); # pair string int : map address nat : nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                                FAILWITH;   # FAILED
                              }; # @some : map address nat : nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                            SOME;       # option nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                            SENDER;     # address : option nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                            UPDATE;     # map address nat : nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                            PAIR;       # pair (map address nat) nat : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                            SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                            SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                            UPDATE;     # big_map address (pair (map address nat) nat) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                            PAIR;       # pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                            PAIR;       # pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                            PAIR;       # pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                          }
                          {
                            DROP;       # pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                          }; # pair (pair (pair (big_map address (pair (map address nat) nat)) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                      }
                      {
                        SWAP;       # @storage : @parameter%updateContractMetadata
                        # == updateContractMetadata ==
                        # sp.verify(sp.sender == self.data.governorAddress, message = 'not governor') # @storage : @parameter%updateContractMetadata
                        DUP;        # @storage : @storage : @parameter%updateContractMetadata
                        DUG 2;      # @storage : @parameter%updateContractMetadata : @storage
                        CAR;        # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%updateContractMetadata : @storage
                        CAR;        # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : @parameter%updateContractMetadata : @storage
                        CDR;        # pair (address %governorAddress) (big_map %metadata string bytes) : @parameter%updateContractMetadata : @storage
                        CAR;        # address : @parameter%updateContractMetadata : @storage
                        SENDER;     # address : address : @parameter%updateContractMetadata : @storage
                        COMPARE;    # int : @parameter%updateContractMetadata : @storage
                        EQ;         # bool : @parameter%updateContractMetadata : @storage
                        IF
                          {}
                          {
                            PUSH (pair string int) (Pair "verify" 365); # pair string int : @parameter%updateContractMetadata : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%updateContractMetadata : @storage
                        SWAP;       # @storage : @parameter%updateContractMetadata
                        # self.data.metadata[sp.fst(params)] = sp.snd(params) # @storage : @parameter%updateContractMetadata
                        UNPAIR;     # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%updateContractMetadata
                        UNPAIR;     # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%updateContractMetadata
                        UNPAIR;     # big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%updateContractMetadata
                        SWAP;       # pair (address %governorAddress) (big_map %metadata string bytes) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%updateContractMetadata
                        UNPAIR;     # address : big_map string bytes : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%updateContractMetadata
                        SWAP;       # big_map string bytes : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%updateContractMetadata
                        DUP 6;      # @parameter%updateContractMetadata : big_map string bytes : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%updateContractMetadata
                        CDR;        # bytes : big_map string bytes : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%updateContractMetadata
                        SOME;       # option bytes : big_map string bytes : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%updateContractMetadata
                        DIG 6;      # @parameter%updateContractMetadata : option bytes : big_map string bytes : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                        CAR;        # string : option bytes : big_map string bytes : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                        UPDATE;     # big_map string bytes : address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                        SWAP;       # address : big_map string bytes : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                        PAIR;       # pair address (big_map string bytes) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                        SWAP;       # big_map address (pair (map %approvals address nat) (nat %balance)) : pair address (big_map string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                        PAIR;       # pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair address (big_map string bytes)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                        PAIR;       # pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair address (big_map string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                        PAIR;       # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair address (big_map string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                      }; # pair (pair (pair (big_map address (pair (map address nat) nat)) (pair address (big_map string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                    NIL operation; # list operation : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair address (big_map string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                  }; # list operation : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair address (big_map string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
              }; # list operation : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair address (big_map string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map nat (pair nat (map string bytes))) nat)))
          }
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%updateGovernorAddress
                    # == updateGovernorAddress ==
                    # sp.verify(sp.sender == self.data.governorAddress, message = 'not governor') # @storage : @parameter%updateGovernorAddress
                    DUP;        # @storage : @storage : @parameter%updateGovernorAddress
                    DUG 2;      # @storage : @parameter%updateGovernorAddress : @storage
                    CAR;        # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%updateGovernorAddress : @storage
                    CAR;        # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : @parameter%updateGovernorAddress : @storage
                    CDR;        # pair (address %governorAddress) (big_map %metadata string bytes) : @parameter%updateGovernorAddress : @storage
                    CAR;        # address : @parameter%updateGovernorAddress : @storage
                    SENDER;     # address : address : @parameter%updateGovernorAddress : @storage
                    COMPARE;    # int : @parameter%updateGovernorAddress : @storage
                    EQ;         # bool : @parameter%updateGovernorAddress : @storage
                    IF
                      {}
                      {
                        PUSH (pair string int) (Pair "verify" 331); # pair string int : @parameter%updateGovernorAddress : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%updateGovernorAddress : @storage
                    SWAP;       # @storage : @parameter%updateGovernorAddress
                    # self.data.governorAddress = params # @storage : @parameter%updateGovernorAddress
                    UNPAIR;     # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%updateGovernorAddress
                    UNPAIR;     # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%updateGovernorAddress
                    UNPAIR;     # big_map address (pair (map %approvals address nat) (nat %balance)) : pair (address %governorAddress) (big_map %metadata string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%updateGovernorAddress
                    SWAP;       # pair (address %governorAddress) (big_map %metadata string bytes) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%updateGovernorAddress
                    CDR;        # big_map string bytes : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%updateGovernorAddress
                    DIG 4;      # @parameter%updateGovernorAddress : big_map string bytes : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                    PAIR;       # pair @parameter%updateGovernorAddress (big_map string bytes) : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                    SWAP;       # big_map address (pair (map %approvals address nat) (nat %balance)) : pair @parameter%updateGovernorAddress (big_map string bytes) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                    PAIR;       # pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair @parameter%updateGovernorAddress (big_map string bytes)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                    PAIR;       # pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair @parameter%updateGovernorAddress (big_map string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                    PAIR;       # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair @parameter%updateGovernorAddress (big_map string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                  }
                  {
                    SWAP;       # @storage : @parameter%updateOvenRegistryAddress
                    # == updateOvenRegistryAddress ==
                    # sp.verify(sp.sender == self.data.governorAddress, message = 'not governor') # @storage : @parameter%updateOvenRegistryAddress
                    DUP;        # @storage : @storage : @parameter%updateOvenRegistryAddress
                    DUG 2;      # @storage : @parameter%updateOvenRegistryAddress : @storage
                    CAR;        # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%updateOvenRegistryAddress : @storage
                    CAR;        # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : @parameter%updateOvenRegistryAddress : @storage
                    CDR;        # pair (address %governorAddress) (big_map %metadata string bytes) : @parameter%updateOvenRegistryAddress : @storage
                    CAR;        # address : @parameter%updateOvenRegistryAddress : @storage
                    SENDER;     # address : address : @parameter%updateOvenRegistryAddress : @storage
                    COMPARE;    # int : @parameter%updateOvenRegistryAddress : @storage
                    EQ;         # bool : @parameter%updateOvenRegistryAddress : @storage
                    IF
                      {}
                      {
                        PUSH (pair string int) (Pair "verify" 357); # pair string int : @parameter%updateOvenRegistryAddress : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%updateOvenRegistryAddress : @storage
                    SWAP;       # @storage : @parameter%updateOvenRegistryAddress
                    # self.data.ovenRegistryAddress = params # @storage : @parameter%updateOvenRegistryAddress
                    UNPAIR;     # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%updateOvenRegistryAddress
                    UNPAIR;     # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%updateOvenRegistryAddress
                    SWAP;       # pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%updateOvenRegistryAddress
                    UNPAIR;     # pair (address %ovenRegistryAddress) (address %quipuswapAddress) : pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent) : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%updateOvenRegistryAddress
                    CDR;        # address : pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent) : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%updateOvenRegistryAddress
                    DIG 4;      # @parameter%updateOvenRegistryAddress : address : pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent) : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                    PAIR;       # pair @parameter%updateOvenRegistryAddress address : pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent) : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                    PAIR;       # pair (pair @parameter%updateOvenRegistryAddress address) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                    SWAP;       # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair @parameter%updateOvenRegistryAddress address) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                    PAIR;       # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair @parameter%updateOvenRegistryAddress address) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                    PAIR;       # pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair @parameter%updateOvenRegistryAddress address) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                  }; # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair address (big_map string bytes))) (pair (pair address address) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
              }
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%updateQuipuswapAddress
                    # == updateQuipuswapAddress ==
                    # sp.verify(sp.sender == self.data.governorAddress, message = 'not governor') # @storage : @parameter%updateQuipuswapAddress
                    DUP;        # @storage : @storage : @parameter%updateQuipuswapAddress
                    DUG 2;      # @storage : @parameter%updateQuipuswapAddress : @storage
                    CAR;        # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%updateQuipuswapAddress : @storage
                    CAR;        # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : @parameter%updateQuipuswapAddress : @storage
                    CDR;        # pair (address %governorAddress) (big_map %metadata string bytes) : @parameter%updateQuipuswapAddress : @storage
                    CAR;        # address : @parameter%updateQuipuswapAddress : @storage
                    SENDER;     # address : address : @parameter%updateQuipuswapAddress : @storage
                    COMPARE;    # int : @parameter%updateQuipuswapAddress : @storage
                    EQ;         # bool : @parameter%updateQuipuswapAddress : @storage
                    IF
                      {}
                      {
                        PUSH (pair string int) (Pair "verify" 349); # pair string int : @parameter%updateQuipuswapAddress : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%updateQuipuswapAddress : @storage
                    SWAP;       # @storage : @parameter%updateQuipuswapAddress
                    # self.data.quipuswapAddress = params # @storage : @parameter%updateQuipuswapAddress
                    UNPAIR;     # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%updateQuipuswapAddress
                    UNPAIR;     # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%updateQuipuswapAddress
                    SWAP;       # pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%updateQuipuswapAddress
                    UNPAIR;     # pair (address %ovenRegistryAddress) (address %quipuswapAddress) : pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent) : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%updateQuipuswapAddress
                    CAR;        # address : pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent) : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%updateQuipuswapAddress
                    DIG 4;      # @parameter%updateQuipuswapAddress : address : pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent) : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                    SWAP;       # address : @parameter%updateQuipuswapAddress : pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent) : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                    PAIR;       # pair address @parameter%updateQuipuswapAddress : pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent) : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                    PAIR;       # pair (pair address @parameter%updateQuipuswapAddress) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                    SWAP;       # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair address @parameter%updateQuipuswapAddress) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                    PAIR;       # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair address @parameter%updateQuipuswapAddress) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                    PAIR;       # pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair address @parameter%updateQuipuswapAddress) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                  }
                  {
                    IF_LEFT
                      {
                        SWAP;       # @storage : @parameter%updateRewardPercent
                        # == updateRewardPercent ==
                        # sp.verify(sp.sender == self.data.governorAddress, message = 'not governor') # @storage : @parameter%updateRewardPercent
                        DUP;        # @storage : @storage : @parameter%updateRewardPercent
                        DUG 2;      # @storage : @parameter%updateRewardPercent : @storage
                        CAR;        # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%updateRewardPercent : @storage
                        CAR;        # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : @parameter%updateRewardPercent : @storage
                        CDR;        # pair (address %governorAddress) (big_map %metadata string bytes) : @parameter%updateRewardPercent : @storage
                        CAR;        # address : @parameter%updateRewardPercent : @storage
                        SENDER;     # address : address : @parameter%updateRewardPercent : @storage
                        COMPARE;    # int : @parameter%updateRewardPercent : @storage
                        EQ;         # bool : @parameter%updateRewardPercent : @storage
                        IF
                          {}
                          {
                            PUSH (pair string int) (Pair "verify" 339); # pair string int : @parameter%updateRewardPercent : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%updateRewardPercent : @storage
                        SWAP;       # @storage : @parameter%updateRewardPercent
                        # sp.verify(sp.level >= self.data.rewardChangeAllowedLevel, message = 'TOO_SOON') # @storage : @parameter%updateRewardPercent
                        DUP;        # @storage : @storage : @parameter%updateRewardPercent
                        DUG 2;      # @storage : @parameter%updateRewardPercent : @storage
                        CAR;        # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%updateRewardPercent : @storage
                        CDR;        # pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : @parameter%updateRewardPercent : @storage
                        CDR;        # pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent) : @parameter%updateRewardPercent : @storage
                        CAR;        # nat : @parameter%updateRewardPercent : @storage
                        LEVEL;      # nat : nat : @parameter%updateRewardPercent : @storage
                        COMPARE;    # int : @parameter%updateRewardPercent : @storage
                        GE;         # bool : @parameter%updateRewardPercent : @storage
                        IF
                          {}
                          {
                            PUSH (pair string int) (Pair "verify" 340); # pair string int : @parameter%updateRewardPercent : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%updateRewardPercent : @storage
                        SWAP;       # @storage : @parameter%updateRewardPercent
                        # self.data.rewardPercent = params # @storage : @parameter%updateRewardPercent
                        UNPAIR;     # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%updateRewardPercent
                        UNPAIR;     # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%updateRewardPercent
                        SWAP;       # pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)) : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%updateRewardPercent
                        UNPAIR;     # pair (address %ovenRegistryAddress) (address %quipuswapAddress) : pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent) : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%updateRewardPercent
                        SWAP;       # pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent) : pair (address %ovenRegistryAddress) (address %quipuswapAddress) : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%updateRewardPercent
                        CAR;        # nat : pair (address %ovenRegistryAddress) (address %quipuswapAddress) : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%updateRewardPercent
                        DIG 4;      # @parameter%updateRewardPercent : nat : pair (address %ovenRegistryAddress) (address %quipuswapAddress) : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                        SWAP;       # nat : @parameter%updateRewardPercent : pair (address %ovenRegistryAddress) (address %quipuswapAddress) : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                        PAIR;       # pair nat @parameter%updateRewardPercent : pair (address %ovenRegistryAddress) (address %quipuswapAddress) : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                        SWAP;       # pair (address %ovenRegistryAddress) (address %quipuswapAddress) : pair nat @parameter%updateRewardPercent : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                        PAIR;       # pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair nat @parameter%updateRewardPercent) : pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                        SWAP;       # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair nat @parameter%updateRewardPercent) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                        PAIR;       # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair nat @parameter%updateRewardPercent)) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)))
                        PAIR;       # pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair nat @parameter%updateRewardPercent))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))))
                      }
                      {
                        SWAP;       # @storage : @parameter%updateTokenMetadata
                        # == updateTokenMetadata ==
                        # sp.verify(sp.sender == self.data.governorAddress, message = 'not governor') # @storage : @parameter%updateTokenMetadata
                        DUP;        # @storage : @storage : @parameter%updateTokenMetadata
                        DUG 2;      # @storage : @parameter%updateTokenMetadata : @storage
                        CAR;        # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%updateTokenMetadata : @storage
                        CAR;        # pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes)) : @parameter%updateTokenMetadata : @storage
                        CDR;        # pair (address %governorAddress) (big_map %metadata string bytes) : @parameter%updateTokenMetadata : @storage
                        CAR;        # address : @parameter%updateTokenMetadata : @storage
                        SENDER;     # address : address : @parameter%updateTokenMetadata : @storage
                        COMPARE;    # int : @parameter%updateTokenMetadata : @storage
                        EQ;         # bool : @parameter%updateTokenMetadata : @storage
                        IF
                          {}
                          {
                            PUSH (pair string int) (Pair "verify" 376); # pair string int : @parameter%updateTokenMetadata : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%updateTokenMetadata : @storage
                        SWAP;       # @storage : @parameter%updateTokenMetadata
                        # self.data.token_metadata[0] = params # @storage : @parameter%updateTokenMetadata
                        UNPAIR;     # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : @parameter%updateTokenMetadata
                        SWAP;       # pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply))) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%updateTokenMetadata
                        UNPAIR;     # pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%updateTokenMetadata
                        SWAP;       # pair (pair (int %state) (address %tokenAddress)) (pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply)) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%updateTokenMetadata
                        UNPAIR;     # pair (int %state) (address %tokenAddress) : pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%updateTokenMetadata
                        SWAP;       # pair (big_map %token_metadata nat (pair nat (map string bytes))) (nat %totalSupply) : pair (int %state) (address %tokenAddress) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%updateTokenMetadata
                        UNPAIR;     # big_map nat (pair nat (map string bytes)) : nat : pair (int %state) (address %tokenAddress) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : @parameter%updateTokenMetadata
                        DIG 5;      # @parameter%updateTokenMetadata : big_map nat (pair nat (map string bytes)) : nat : pair (int %state) (address %tokenAddress) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                        SOME;       # option (pair nat (map string bytes)) : big_map nat (pair nat (map string bytes)) : nat : pair (int %state) (address %tokenAddress) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                        PUSH nat 0; # nat : option (pair nat (map string bytes)) : big_map nat (pair nat (map string bytes)) : nat : pair (int %state) (address %tokenAddress) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                        UPDATE;     # big_map nat (pair nat (map string bytes)) : nat : pair (int %state) (address %tokenAddress) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                        PAIR;       # pair (big_map nat (pair nat (map string bytes))) nat : pair (int %state) (address %tokenAddress) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                        SWAP;       # pair (int %state) (address %tokenAddress) : pair (big_map nat (pair nat (map string bytes))) nat : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                        PAIR;       # pair (pair (int %state) (address %tokenAddress)) (pair (big_map nat (pair nat (map string bytes))) nat) : pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                        SWAP;       # pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat)) : pair (pair (int %state) (address %tokenAddress)) (pair (big_map nat (pair nat (map string bytes))) nat) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                        PAIR;       # pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map nat (pair nat (map string bytes))) nat)) : pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))
                        SWAP;       # pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent))) : pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map nat (pair nat (map string bytes))) nat))
                        PAIR;       # pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair (nat %rewardChangeAllowedLevel) (nat %rewardPercent)))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map nat (pair nat (map string bytes))) nat)))
                      }; # pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair (address %ovenRegistryAddress) (address %quipuswapAddress)) (pair nat nat))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map nat (pair nat (map string bytes))) nat)))
                  }; # pair (pair (pair (big_map %balances address (pair (map %approvals address nat) (nat %balance))) (pair (address %governorAddress) (big_map %metadata string bytes))) (pair (pair address address) (pair nat nat))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map nat (pair nat (map string bytes))) nat)))
              }; # pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair address (big_map string bytes))) (pair (pair address address) (pair nat nat))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map nat (pair nat (map string bytes))) nat)))
            NIL operation; # list operation : pair (pair (pair (big_map address (pair (map %approvals address nat) (nat %balance))) (pair address (big_map string bytes))) (pair (pair address address) (pair nat nat))) (pair (pair (pair (option %savedState_depositor address) (option %savedState_redeemer address)) (pair (option %savedState_tokensToDeposit nat) (option %savedState_tokensToRedeem nat))) (pair (pair (int %state) (address %tokenAddress)) (pair (big_map nat (pair nat (map string bytes))) nat)))
          }; # list operation : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair address (big_map string bytes))) (pair (pair address address) (pair nat nat))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map nat (pair nat (map string bytes))) nat)))
      }; # list operation : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair address (big_map string bytes))) (pair (pair address address) (pair nat nat))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map nat (pair nat (map string bytes))) nat)))
    NIL operation; # list operation : list operation : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair address (big_map string bytes))) (pair (pair address address) (pair nat nat))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map nat (pair nat (map string bytes))) nat)))
    SWAP;       # list operation : list operation : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair address (big_map string bytes))) (pair (pair address address) (pair nat nat))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map nat (pair nat (map string bytes))) nat)))
    ITER
      {
        CONS;       # list operation : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair address (big_map string bytes))) (pair (pair address address) (pair nat nat))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map nat (pair nat (map string bytes))) nat)))
      }; # list operation : pair (pair (pair (big_map address (pair (map address nat) nat)) (pair address (big_map string bytes))) (pair (pair address address) (pair nat nat))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map nat (pair nat (map string bytes))) nat)))
    PAIR;       # pair (list operation) (pair (pair (pair (big_map address (pair (map address nat) nat)) (pair address (big_map string bytes))) (pair (pair address address) (pair nat nat))) (pair (pair (pair (option address) (option address)) (pair (option nat) (option nat))) (pair (pair int address) (pair (big_map nat (pair nat (map string bytes))) nat))))
  };